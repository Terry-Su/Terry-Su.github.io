{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright Â© 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"master-javascript-implicit-type-conversion","title":"Master JavaScript Implicit Type Conversion","path":"Technology/FrontEnd/JavaScript","route":"/master-javascript-implicit-type-conversion","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/photo/qing-cheng-shan.jpg\",\"alt\":\"The Peak of Mountain QingCheng\"}}></MDXTag>{`\n`}<MDXTag name=\"em\" components={components} parentName=\"p\">{`The Peak of Mountain QingCheng`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Before starting this written-in-English article, I'd like to thank   `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.reddit.com/user/l3l_aze\"}}>{`@l3l_aze`}</MDXTag>{` for pointing out my previous technology article's problems and giving me precious advice on how to write better in English. And after some time for preparation, I start writing articles in English again and will continue to write more.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Implicit type conversion is one of JavaScript's most hot and important features. To master it completely, I've searched lots of relevant articles, consulted the book \"JavaScript: The Definitive Guide, 6th\" and summarized those concepts, ideas, examples into this article.`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`To learn a new knowledge point, we usually search and read a lot of relevant materials(blogs, StackOverflow, etc) online. However, to master it thoroughly, we'd better look for its origin from the definitive material like MDN or a definitive book to ensure its correctness.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`What's the implicit type conversion?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`JavaScript is very flexible, it will convert the type of a value as needed automatically.\nFor example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`'' + 1 // '1'\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`When will implicit type conversion happen?`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here lists commonly used situations:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Expressions(with operators)`}</MDXTag><MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Arithmetic`}</MDXTag>{`  `}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`+`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/* unary +, converse x to number */\n+ x\n\n+ 1 // 1\n+ '1' // 1\n+ true // 1\n+ new Date() // (a numeric value)\n\n\n/* two operands */\na + b\n\n// 1. if either is an object, converse it to a primitive first\n{} + {} // '[object object][object object]'\n[] + [] // ''\n[] + new Date() // (A date string)\n\n// 2. if one is a string, converse the other to a string\n1 + '' // '1'\n'' + 1 // '1'\n'' + true // 'true'\n\n// 3. otherwise, converse both to numbers\n1 + true // 2\ntrue + true // 2\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`-`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`*`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`/`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`++`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`--`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/* Converse value or values to number */\n- '1' // -1\n[] - 1 // -1\n[] - {} // NaN\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Relational`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`==`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`!=`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/* two operands */\na == b\n\n// 1. if one is \\`null\\` and the other is \\`undefined\\`, they are equal\nnull == undefined // true\n\n// 2. if one is a number and the other is a string, convert the string\n// to a number, compare again\n1 == '1' // true\n\n// 3. if either is boolean, convert it to a number, compare again\ntrue == 1 // true\nfalse == 0 // true\n\n// 4. if one is an object, and the other is a number or a string, \n// convert the object to a primitive, compare again\n[ 1 ] == 1 // true\n[ '1' ] == '1' // true\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`>`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`>=`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`<`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`<=`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/* two operands */\na > b\n\n// 1. if either is an object, convert it to a primitive, compare again\n[ 2 ] > 1 // true\n\n// 2. if both are strings, compare them using alphabetical order\n'b' > 'a' // true\n\n// 3. if either is a number, convert one or two not number to number\n'2' > 1 // true\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`in`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/* if left operand isn't a string, convert it to a string  */\na in b\n\n'1' in { 1: '' } // true\n1 in { 1: 'a' } // true\n1 in [ 'a', 'b' ] // true\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Logic`}</MDXTag>{`  `}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`&&`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`||`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`!`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/* if either isn't booelan, convert it to a boolean value */\nBoolean( null || undefined || 0 || -0 || NaN || '' ) // false\nBoolean( 1 && 'a' && {} && [] && [0] && function(){} ) // true\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note that `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`following`}</MDXTag>{` `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`?:`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`if`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`else if`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`while`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`do/while`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`for`}</MDXTag>{` use the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`same implicit type conversion way`}</MDXTag>{` as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`&&`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`||`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`!`}</MDXTag>{`(Logic expression).`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Conditional`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`?:`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Statements`}</MDXTag><MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"em\" components={components} parentName=\"p\">{`Conditional`}</MDXTag>{`  `}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`if`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`else if`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"em\" components={components} parentName=\"p\">{`Loop`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`while`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`do/while`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`for`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`How about explicit type conversion`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Explicit type conversion makes the type conversion codes clear.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`Although there're many ways to perform an explicit type conversion, such as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`toString()`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`parseInt()`}</MDXTag>{`, it's recommended to use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Boolean()`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Number()`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`String()`}</MDXTag>{` or `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Object()`}</MDXTag>{` functions.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`Boolean( 1 ) // true\nBoolean( 0 ) // false\n\nNumber( '1' ) // 1\n\nString( 1 ) // '1'\n\nObject( 1 ) // new Number(1)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Common JavaScript Type Conversion`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The following reference table, from the book \"JavaScript: The Definitive Guide, 6th\", is especially convenient to look up common type conversion in JavaScript`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/javascript-type-conversion.png\",\"alt\":\"Little Bar\"}}></MDXTag>{`\n`}<MDXTag name=\"em\" components={components} parentName=\"p\">{`\"JavaScript-The Definitive Guide 6th\" 3.8.0`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Conclusion`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Implicit type conversion can be very useful sometimes, simplifying our codes, for example. But we'd better also pay attention to the potential risk that conversed value could be unexpected if someone wasn't familiar with the rules of implicit type conversion enough. To avoid this, use explicit type conversion instead.`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1539067980000,"comment":11,"availableOtherLocales":[],"componentTextMap":{},"siteTitle":"Master JavaScript Implicit Type Conversion(Terry Su Blog)","siteMetaDescription":" Master JavaScript Implicit Type Conversion The Peak of Mountain QingCheng\n\nBefore starting this written-in-English article, I'd like to thank @... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Welcome to [star and subscribe](https://github.com/Terry-Su/blogs), to read my latest original front end technology blogs.**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Welcome to <a href=\"https://github.com/Terry-Su/blogs\">star and subscribe</a>, to read my latest original front end technology blogs.</strong></p>"}
