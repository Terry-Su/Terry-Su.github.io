{"pathnameRoot":"/cn/","authorUrl":"https://github.com/Terry-Su","locale":"zh_CN","logoTitle":"苏溪云","noteIsAutoTranslated":"本文为自动翻译。","copyright":{"left":"版权 © 2017-","center":"苏溪云","right":"保留所有权利"},"blogGithub":"https://github.com/Terry-Su/blogs-cn","id":"cn/understand-react-diff-algorithm-from-source-codes","title":"搞懂React源码系列-React Diff原理","path":"Technology/FrontEnd/React","route":"/cn/understand-react-diff-algorithm-from-source-codes","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/react-diff.jpg\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`时隔2年，重新看React源码，很多以前不理解的内容现在都懂了。本文将用实际案例结合相关React源码，集中讨论React Diff原理。使用当前最新React版本：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`16.13.1`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`另外，今年将写一个“搞懂React源码系列”，把React`}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`最核心内容`}</MDXTag>{`用最通俗易懂地方式讲清楚。2020年搞懂React源码系列：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`React Diff原理`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`React 调度原理`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`搭建阅读React源码环境-支持所有版本断点调试`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`React Hooks原理`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在讨论Diff算法前，有必要先介绍React Fiber，因为React源码中各种实现都是基于Fiber，包括Diff算法。当然，熟悉React Fiber的朋友可跳过Fiber介绍。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Fiber简介`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Fiber并不复杂，但如果要`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://zhuanlan.zhihu.com/p/57346388\"}}>{`全面理解`}</MDXTag>{`，还是得花好一段时间。本文主题是diff原理，所以这里仅简单介绍下Fiber。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/fiber.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Fiber是一个抽象的节点对象，每个对象可能有子Fiber(child)和相邻Fiber(child)和父Fiber(return),React使用链表的形式将所有Fiber节点连接，形成链表树。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Fiber还有副作用标签(effectTag)，比如替换Placement(替换)和Deletion(删除)，用于之后更新DOM。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`值得注意的是，React diff中，除了fiber，还用到了基础的`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/docs/glossary.html#elements\"}}>{`React元素对象`}</MDXTag>{`（如： 将`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<div>foo</div>`}</MDXTag>{`编译后生成的对象: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{ type: 'div', props: { children: 'foo' } }`}</MDXTag>{` ）。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Diff 过程`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`React源码中，关于diff要从`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileChildren(...)`}</MDXTag>{`说起。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`总流程：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/flowchart-main.svg\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`流程图中, 显示源码中用到的函数名，省略复杂参数。“新内容”即被比较的新内容，它可能是三种类型：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`对象： React元素`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`字符串或数字： 文本`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`数组：数组元素可能是React元素或文本`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`新内容为React元素`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们先以新内容为React元素为例，全面的调试一遍代码，将之后会重复用到的方法在此步骤中讲解，同时以一张流程图作为总结。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`案例：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`function SingleElementDifferentTypeChildA() { return <h1>A</h1> }\n\nfunction SingleElementDifferentTypeChildB() { return <h2>B</h2> }\n\nfunction SingleElementDifferentType() {\n\n const [ showingA, setShowingA ] = useState( true ) \n\n useEffect( () => {\n\n  setTimeout( () => setShowingA( false ), 1000 )\n\n } )\n\n return showingA ? <SingleElementDifferentTypeChildA/> : <SingleElementDifferentTypeChildB/>\n\n}\n\nReactDOM.render( <SingleElementDifferentType/>, document.getElementById('container') )\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`从第一步`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileChildren(...)`}</MDXTag>{`开始调试代码，无需关注与diff不相关的内容，比如`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`renderExpirationTime`}</MDXTag>{`。左侧调试面板可看到对应变量的类型。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/1.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`此处:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`workInProgress`}</MDXTag>{`: 父级Fiber`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`current.child`}</MDXTag>{`: 处于比较中的旧内容对应fiber`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`nextChildren`}</MDXTag>{`: 即处于比较中的新内容, 为React元素，其类型为对象。`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`在Diff时`}</MDXTag>{`，比较中的`}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`旧内容为Fiber`}</MDXTag>{`,而比较中的`}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`新内容为React元素、文本或数组`}</MDXTag>{`。其实从这一步已经可以看出，React官网的`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm\"}}>{`diff算法说明`}</MDXTag>{`和实际代码是实现差别较大。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/2.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`因为新内容为对象，所以继续执行`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileSingleElement(...)`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`placeSingleChild(...)`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`我们先看`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`placeSingleChild(...)`}</MDXTag>{`：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/3.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`placeSingleChild(...)`}</MDXTag>{`的作用很简单，给differ后的Fiber添加副作用标签：Placement（替换），表明在之后需要将旧Fiber对应的DOM元素进行替换。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`继续看 `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileSingleElement(...)`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/4.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`此处正式开始diff(比较)`}</MDXTag>{`，child为旧内容fiber，element为新内容，它们的`}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`元素类型`}</MDXTag>{`不同。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/5.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/6.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`因为类型不同，React将“删除”旧内容fiber以及其所有相邻Fiber（即给这些fiber添加副作用标签 Deletion（删除））， 并基于新内容生成新的Fiber。然后将新的Fiber设置为父Fiber的child。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`到此，一个新内容为React元素的且新旧内容的元素类型不同的Diff过程已经完成。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`那如果新旧内容的元素类型相同呢？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`编写类似案例，我们可以得到结果`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/7.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`userFiber(...)`}</MDXTag>{`：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/8.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`userFiber(...)`}</MDXTag>{`的主要作用是基于旧内容fiber和新内容的属性（props）克隆生成一个新内容fiber，这也是所谓的fiber复用。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`所以当新旧内容的元素类容相同，React会复用旧内容fiber，结合新内容属性，生成一个新的fiber。同样，将新的fiber设置位父fiber的child。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`新内容为React元素的diff流程总结：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/flowchart-react-element.svg\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`新内容为文本`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`当新内容为文本时，逻辑与新内容为React元素时类似：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/flowchart-text.svg\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`新内容为数组`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`使用案例：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`function ArrayComponent() {\n\n  const [ showingA, setShowingA ] = useState( true ) \n\n  useEffect( () => {\n\n   setTimeout( () => setShowingA( false ), 1000 )\n\n  } )\n\n  return showingA ? <div>\n\n​    <span>A</span>\n\n​    <span>B</span>\n\n  </div> : <div>\n\n​    <span>C</span>\n\n​    D\n\n  </div>\n\n}\n\nReactDOM.render( <ArrayComponent/>, document.getElementById('container') )\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/9.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`若新内容为数组，需`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileChildrenArray(...)`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/10.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`for循环遍历新内容数组，伪代码（用于理解）：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`for ( let i = 0, oldFiber; i < newArray.length; ) {\n\n  ...\n\n  i++\n\n  oldFiber = oldFiber.sibling\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`遍历每个新内容数组元素时：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/11.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`updateSlot(...)`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/12.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`因为`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`newChild`}</MDXTag>{`的类型为`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`object`}</MDXTag>{`, 所以：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/13.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`updateElement(...)`}</MDXTag>{`:`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/14.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`updateElement(...)`}</MDXTag>{`与`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileSingleElement(...)`}</MDXTag>{`核心逻辑一致：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`若新旧内容元素类型一致，则克隆旧fiber，结合新内容生成新的fiber`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`若不一致，则基于新内容创建新的fiber。`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`同理，`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`updateTextNode(...)`}</MDXTag>{`：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/15.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`updateTextNode(...)`}</MDXTag>{`与`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`reconcileSingleTextNode(...)`}</MDXTag>{`核心逻辑一致：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`若旧内容fiber的标签不是`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`HostText`}</MDXTag>{`,则基于新内容文本创建新的fiber`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`若是`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`HostText`}</MDXTag>{`, 则克隆旧fiber，结合新内容文本生成新的fiber`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`在本案例中，新内容数组for循环完成后：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/16.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`因为新旧内容数组的长度一致，所以直接返回第一个新的fiber。然后同上，React将新的fiber设为父fiber的child。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`不过若新内容数组长度与旧内容fiber及其相邻fiber的总个数不一致，React如何处理？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`编写类似案例。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`若新内容数组长度更短：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/17.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`React将删除多余的旧内容fiber的相邻fiber。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`若新内容数组长度更长：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/18.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`React将遍历多余的新内容数组元素，基于新内容数组元素创建的新的fiber，并添加副作用标签 Placement（替换）。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`新内容为数组时的diff流程总结：`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/understand-react-diff-algorithm-from-source-codes/flowchart-array.svg\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`总结`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`通过React源码研究diff算法时，仅调试分析`}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`相关代码`}</MDXTag>{`，能比较容易的得出答案。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Diff的三种情况：`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`新内容为React元素`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`新内容为文本`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`新内容为数组`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Diff时若比较结果相同，则复用旧内容Fiber，结合新内容生成新Fiber；若不同，仅通过新内容创建新fiber。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`然后给旧内容fiber添加副作用替换标签，或者给旧内容fiber及其所有相邻元素添加副作用删除标签。`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`最后将新的（第一个）fiber设为父fiber的child。`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`参考资料`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`The how and why on React’s usage of linked list in Fiber to walk the component’s tree: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://medium.com/react-in-depth/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7\"}}>{`https://medium.com/react-in-depth/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`[译]`}{`深入React fiber架构及源码: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://zhuanlan.zhihu.com/p/57346388\"}}>{`https://zhuanlan.zhihu.com/p/57346388`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Inside Fiber: in-depth overview of the new reconciliation algorithm in React: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\"}}>{`https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e`}</MDXTag></MDXTag>\n</MDXTag>\n</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1586394000000,"comment":10,"isAutoTranslated":false,"availableOtherLocales":[],"importedCodes":"","siteTitle":"搞懂React源码系列-React Diff原理(苏溪云的博客)","siteMetaDescription":" 搞懂React源码系列-React Diff原理 \n\n时隔2年，重新看React源码，很多以前不理解的内容现在都懂了。本文将用实际案例结合相关React源码，集中讨论React Diff原理。使用当前最新React版本：16.13.1。\n\n另外，今年... (苏溪云的博客)","categoryTitle":"分类","postTimeTitle":"发布时间","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"苏溪云的博客","siteMetaDescription":"苏溪云的原创前端技术博客 4年前端 分享主流前端技术 JavaScript ReactJS","categoryNewest":"最近发布","navArticles":"所有文章","navAbout":"关于作者"},"articleTexts":{"endingWordsExtra":"**感谢你的阅读。欢迎通过微信（扫描下方二维码）或[Github](https://github.com/Terry-Su/blogs-cn)订阅我的博客。**\n\n ![微信公众号:苏溪云的博客](https://user-images.githubusercontent.com/23733477/77869172-2459f400-7270-11ea-8a84-d5d63a426c19.png)","qrcodeImageUrl":"","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","category":"分类","postTime":"发布时间","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","commentOnGithub":"添加评论 (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>感谢你的阅读。欢迎通过微信（扫描下方二维码）或<a href=\"https://github.com/Terry-Su/blogs-cn\">Github</a>订阅我的博客。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/23733477/77869172-2459f400-7270-11ea-8a84-d5d63a426c19.png\" alt=\"微信公众号:苏溪云的博客\" /></p>"}
