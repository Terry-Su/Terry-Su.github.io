{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright Â© 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"html,css,js-plus-github-equals-your-own-codepen","title":"HTML,CSS,JS Plus Github Equals Your Own CodePen","path":"Technology/Project","route":"/html,css,js-plus-github-equals-your-own-codepen","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/photo/little-bar.jpg\",\"alt\":\"Little Bar\"}}></MDXTag>{`\n`}<MDXTag name=\"em\" components={components} parentName=\"p\">{`( Little Bar at ChengDu, China )`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://codepen.io\"}}>{`CodePen`}</MDXTag>{` and `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://jsfiddle.net/\"}}>{`JSFiddle`}</MDXTag>{` are both convenient online codes editors for front-end developers. And you can demonstrate your code examples vividly in your blog or website by inserting an online editor example, which displays codes and the final result.  `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, how an editor's style can stay the same with the style of your blog or website is a problem, and you have to rely on them deeply. Because of these limits, I'm wondering if we can write our own code viewer using totally front-end technologies without any dynamic server, and the answer is amazing \"YES\".`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Showcase`}</MDXTag>\n<iframe src=\"https://terry-su.github.io/CDN/CodeViewer/index.html?defaultDataUrl=https://terry-su.github.io/CDN/CodeViewer/examples/hello.js\"></iframe>\n<MDXTag name=\"h2\" components={components}>{`How it works`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There're 3 HTML layers:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-css\"}}>{` __________\n/_________/ User HTML\n\n __________\n/_________/ CodeViewer HTML\n\n __________\n/_________/ Basic HTML\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Basic HTML: most basic HTML that receives the data, HTML/CSS/JS strings, for rendering standalone web page from parent HTML.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`CodeViewer HTML: building the user interfaces to update basic HTML, and receiving settings from parent HTML.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`User HTML: yeah, it applies some settings, such as default data or default display mode, on CodeViewer HTML.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`How it's built`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Based on concepts above, you can already build a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://terry-su.github.io/CDN/CodeViewer/basicVersion/index.html\"}}>{`simplified CodeViewer HTML`}</MDXTag>{`, and the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/Terry-Su/CDN/tree/master/CodeViewer/basicVersion\"}}>{`source codes`}</MDXTag>{` are so simple that it doesn't even need Webpack at all.   `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`However, to organize the interaction logic of CodeViewer better, using React and Redux is a good idea. CodeViewer is now using Typescript + React + `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/dvajs/dva\"}}>{`Dva`}</MDXTag>{`(a light framework including redux) as development environment.     `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`And CodeViewer is deployed simply on a commonly used static server: `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://pages.github.com/\"}}>{`Github(Github Pages)`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Where and how to use it`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In fact, you can use it anywhere only if there supports iframe. Specifically, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`github.io`}</MDXTag>{` Github pages support iframe, like `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://drawjs.github.io\"}}>{`the official website of a canvas library`}</MDXTag>{` I wrote before.   `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`To bind content with editor, you add content url as a parameter immediately after the CodeViewer url:   \"Codeviewer url + `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`?defaultDataUrl=`}</MDXTag>{` + Content url\"`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then, just insert `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<iframe src=\"your-code-viewer-url\"></iframe>`}</MDXTag>{` into your blog or website page.  `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Similarly, you can also configure default display mode. For more detail, visit `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/Terry-Su/CodeViewer\"}}>{`Codeviewer's source codes page`}</MDXTag>{`. `}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1536595680000,"comment":9,"availableOtherLocales":[],"importedCodes":"","siteTitle":"HTML,CSS,JS Plus Github Equals Your Own CodePen(Terry Su Blog)","siteMetaDescription":" HTML,CSS,JS Plus Github Equals Your Own CodePen ( Little Bar at ChengDu, China )\n\nCodePen and JSFiddle are both convenient online codes editors for ... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Welcome to [star and subscribe](https://github.com/Terry-Su/blogs), to read my latest original front end technology blogs.**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Welcome to <a href=\"https://github.com/Terry-Su/blogs\">star and subscribe</a>, to read my latest original front end technology blogs.</strong></p>"}
