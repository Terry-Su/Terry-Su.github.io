{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright © 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"reveal-redux-react-redux-mask","title":"Uncover the mystery of redux, react-redux","path":"Technology/FrontEnd/React","route":"/reveal-redux-react-redux-mask","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}>{`React -redux was adopted in 2016 and has been around for more than two years. At this time, I would like to read and understand the source code of redux/react-redux. Although it is not as fresh as before, I still feel I have gained something. Write down the main points, on the one hand for interested readers reference, on the other hand is to make a summary.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`redux`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The react-redux core is redux. In-band redux, react-redux provides only a few apis to associate redux with components on react and react state updates.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First, let's look at how to use redux. Old redux drivers can slide the rollers directly to the next chapter.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`In a nutshell, redux has three concepts: action, reducer, and dispatch. Action and dispatch are well understood: action instructions and commit action instruction methods. While reducer is not understood by individuals literally, but it can be understood as a function to generate state at the abstract level. Use a simple example to illustrate these three concepts:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// action\nconst INCREMENT = { type: 'INCREMENT' }\n\n// reducer\nfunction count( state = 0, action ) {\n    switch( action.type ) {\n        case 'INCREMENT':\n            return state + 1\n        default: \n          return state\n    }\n}\n\n// dispatch\n// Redux is used here\nconst store = redux.createStore( count )\nconsole.log( store.getState() )  // 0\nstore.dispatch( INCREMENT )\nconsole.log( store.getState() ) // 1\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here are the two modules in redux:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`store`}</MDXTag>{`object`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`The middleware`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`store对象`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`API `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{` will create a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{` objects, the process of creating it mainly do the following two things:\n1. Initialize the state\n2. Expose relevant interface: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState ()`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch (action)`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe (the listener)`}</MDXTag>{`, etc. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState ()`}</MDXTag>{` used to retrieve the real time state, store `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch (action) the action to update the state of the incoming`}</MDXTag>{` according to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe (the listener)`}</MDXTag>{` can monitor the change of the state.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`The middleware`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Middleware can be used to debug or submit asynchronous instruction. At the time of initialization store, we through `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore (reducer, the state, applyMiddleware (middleware1 middleware2))`}</MDXTag>{` add multiple middleware.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In order to realize the multiple middleware, redux specially the introduction of functional programming `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`compose`}</MDXTag>{` () method, in simple terms, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`compose`}</MDXTag>{` layers of function call writing become elegant:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// The compose method is not used\na( b( c( 'd' ) ) )\n\n// With the compose method\ncompose( a, b, c )('d')\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`And the middleware is written in a strange way, is a multi - level function, when reading the source code a little around. Obviously, the middleware approach can be optimized, and although the current approach is easy to use in source code, it is slightly more complex for redux users to use single-layer functions.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`function logMiddleware({ getState  }) {\n    return nextDispatch => action => {\n        console.log( 'before dispatch', getState() )\n        const res = nextDispatch( action )\n        console.log( 'after dispatch', getState() )\n        return res\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`react-redux`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once you understand how redux works, you can see how much of the react-redux usage scenario works. React -redux provides several apis to correlate redux with react.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Based on the previous case showing the use of react-redux:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// action\nconst increment = () => ({ type: 'INCREMENT' })\n\n// reducer\nfunction count( state = 0, action ) {\n    switch( action.type ) {\n        case 'INCREMENT':\n            return state + 1\n        default: \n          return state\n    }\n}\n\n// redux\nconst store = Redux.createStore( count )\n\n// react-redux\nconst { Provider, connect } = ReactRedux\nconst mapStateToProps = state => ( { count: state } )\nconst mapDispatchToProps = dispatch => ( { increment : () => dispatch( increment() ) } )\nconst App = connect( mapStateToProps, mapDispatchToProps )( class extends React.Component {\n  onClick = () => {\n   this.props.increment()\n  }  \n  render() {\n        return <div>\n          <p>Count: { this.props.count }</p>\n          <button onClick={ this.onClick }>+</button>\n        </div>\n    }\n} )\n\nReactDOM.render( <Provider store={ store }>\n    <App />\n</Provider>, document.getElementById( 'app' ) )\n`}</MDXTag></MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/js/react-redux/demo/index.html?mode=result\"></iframe>\n<MDXTag name=\"p\" components={components}>{`The two most commonly used apis react-redux provides are:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Provider`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`connect`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`Provider`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`The Provider is essentially a react components, through the react `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/docs/legacy-context.html#how-to-use-context\"}}>{`context API`}</MDXTag>{` (props for a component can span multiple components transfer) mount redux state in the store, and when the component is initialized to start listening to the state.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`When listening to the state change, the Provider will return `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setState`}</MDXTag>{` in the context of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`storeState`}</MDXTag>{`, briefly the implementation code is as follows:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`class Provider extends Component {\n    constructor(props) {\n      super(props)\n    \n      const { store } = props\n    \n      this.state = {\n        storeState: Redux.store.getState(),\n      }\n    }\n    \n    componentDidMount() {\n      this.subscribe()\n    }\n    \n    subscribe() {\n        const { store } = this.props\n        store.subscribe(() => {\n          const newStoreState = store.getState()\n          this.setState(providerState => {\n            return { storeState: newStoreState }\n          })\n        })\n    }\n    render() {\n        const Context = React.createContext(null)\n        <Context.Provider value={this.state}>\n            {this.props.children}\n        </Context.Provider>\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`connect()`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{` method through `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connectHOC`}</MDXTag>{` (HOC: react high-order component) to submit part or all of the state and action method assigned to react component props.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`summary`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Writing react without redux is like writing code without git, we need to use redux to better manage state on the react application. Understanding how redux/react-redux works will eliminate the unknowns and confusion we had when developing with redux and have a complete code execution loop in mind, making the development process transparent and intuitive.`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1545096420000,"comment":4,"availableOtherLocales":["zh_CN"],"componentTextMap":{},"siteTitle":"Uncover the mystery of redux, react-redux(Terry Su Blog)","siteMetaDescription":" Uncover the mystery of redux, react-redux React -redux was adopted in 2016 and has been around for more than two years. At this time, I would ... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Welcome to [star and subscribe](https://github.com/Terry-Su/blogs), to read my latest original front end technology blogs.**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Welcome to <a href=\"https://github.com/Terry-Su/blogs\">star and subscribe</a>, to read my latest original front end technology blogs.</strong></p>"}
