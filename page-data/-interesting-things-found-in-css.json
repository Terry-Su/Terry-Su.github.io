{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright Â© 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"interesting-things-found-in-css","title":"Interesting Things Found in CSS","path":"Technology/FrontEnd/CSS","route":"/interesting-things-found-in-css","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}>{`After reviewing CSS systematically,I've found some interesting CSS topics deserved to be wrote down:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Using only percentage to draw a square`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Specificity-1000 100 10 1`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Properties Inheritable or Not`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Margin collapsing`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Align self`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Box sizing `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Auto`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Using only percentage to draw a square`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Drawing a square by pixel is nothing hard, but have you tried using percentage to draw a square? As you know, browser's default width and height are not same, so using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`width: 10%; height: 10%;`}</MDXTag>{` cannot draw a square definitely. You can get the answer only if you have mastered enough CSS basis:`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`The size of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`margin`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`padding`}</MDXTag>{` as a percentage, relative to the `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`width`}</MDXTag>{` of the containing block.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It amazed me when I found this rule first. Why there's only width? Where's height? Strange but interesting thing. So, there're one more answers:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`width: 0; height: 0; padding: 5%;`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\"><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`width: 10%; height: 0; padding: 5% 0;`}</MDXTag></MDXTag>\n</MDXTag>\n</MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/using-percentage-to-draw-square/index.html?mode=css\" ></iframe>\n<MDXTag name=\"h1\" components={components}>{`Specificity`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`CSS(Cascading Style Sheets) determines the style of dom, and the specificity of a selector determines whether its style,instead of other selectors' styles, can be attached on dom. Specificities of different selectors are listed on following table.`}</MDXTag>\n<MDXTag name=\"table\" components={components}>\n<MDXTag name=\"thead\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"thead\">\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Selector`}</MDXTag>\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Specificity`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"tbody\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}><MDXTag name=\"inlineCode\" components={components} parentName=\"td\">{`style`}</MDXTag>{` attribute of a html tag`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Thousand(1000)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Id`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Hundread(100)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Class`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Ten(10)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`Dom element or pseudo-element`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`one(1)`}</MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can find specifities' numbers from top to bottom are: 1000, 100, 10, 10. This number sequence is really easy enough to be remembered. And selectors' order, as commonly used in daily development, can be accepted by us naturally.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`Therefore, it's convenient if you'd like to calcuate a selector's specifiy, just use the formula: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`m * 1000 + n * 100 + p * 10 + q * 1`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Properties Inheritable or Not`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Someone who has  written countless rows of CSS codes must have found that CSS properties: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`color`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`font-size`}</MDXTag>{` can be inherited but  `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`width`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`height`}</MDXTag>{` cannot. Why? Maybe writing repeating proproties does make no sense.\nThank people on stackoverflow, you can find all CSS properties inheritatble or not on `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.w3.org/TR/CSS21/propidx.html\"}}>{`this list`}</MDXTag>{`. `}</MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Margin(Top and Bottom) collapsing`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Margin collapsing, only for `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`top`}</MDXTag>{` and `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`bottom`}</MDXTag>{` margins, is a strange behavior that margins of `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`blocks`}</MDXTag>{` are collapsed(combined). There's my `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/blogs/details/margin-collapsing-in-css.html\"}}>{`another article`}</MDXTag>{` talking about margin collpasing specifically.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`And normally, collapsed margin's size is the largest of margins being collapsed.`}</MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/parent-and-first-child/index.html?mode=css\" ></iframe>\n<MDXTag name=\"h1\" components={components}>{`Align self`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you are familiar with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`flex`}</MDXTag>{`, you must often set `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`align-items: center;`}</MDXTag>{` on flexbox container to align chilren vertical items center. However, how about setting properties directly on children items to align themselves? Property `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`align-self`}</MDXTag>{` can help it.`}</MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/align-self/index.html?mode=css\" ></iframe>\n<MDXTag name=\"h1\" components={components}>{`Box-sizing`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Once upon a time, I was someone who didn't know this property and who had been struggling for some basis CSS layouts. Main difference between two types is whether width and height have fixed values.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`content-box`}</MDXTag>{` is default type, which means width and height are fixed and padding, border, margin are outside of content.   `}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/box-model-box-sizing-content-box.png\",\"alt\":\"content-box\"}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Likewise, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`border-box`}</MDXTag>{` means width and height are not fixed, being expanded by inner padding  and border with margin still outside.  `}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/box-model-box-sizing-border-box.png\",\"alt\":\"border-box\"}}></MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Auto`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`CSS property value `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`auto`}</MDXTag>{` would justify some elements properties automatically.Two commonly used situations are:`}</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`1. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h3\">{`margin: 0 auto;`}</MDXTag>{` for blocks`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For blocks, centering content can be convenient by setting `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`margin: 0 auto`}</MDXTag>{`.`}</MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/auto/align-block-center/index.html?mode=css\" ></iframe>\n<MDXTag name=\"h3\" components={components}>{`2. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h3\">{`margin-left: auto;`}</MDXTag>{` for flex items`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`There's no `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`justify-self`}</MDXTag>{` like `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`align-self`}</MDXTag>{` for flex container(but grid had) so far. But you could make it by using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`margin`}</MDXTag>{` together with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`auto`}</MDXTag>{`.`}</MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/auto/justify-flex-item/index.html?mode=css\" ></iframe>\n<MDXTag name=\"h1\" components={components}>{`Summary`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`CSS is interesting indeed. Without CSS it would drive lots of front-end developers crazy if they would spend long time to write complex styles like what we have to do for setting the style of canvas now.\nSo far I have just found several interseting things about CSS above, so I would add new things interesting to this article at following time. `}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1531818360000,"comment":8,"availableOtherLocales":[],"componentTextMap":{},"siteTitle":"Interesting Things Found in CSS(Terry Su Blog)","siteMetaDescription":" Interesting Things Found in CSS After reviewing CSS systematically,I've found some interesting CSS topics deserved to be wrote down:... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Welcome to [star and subscribe](https://github.com/Terry-Su/blogs), to read my latest original front end technology blogs.**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Welcome to <a href=\"https://github.com/Terry-Su/blogs\">star and subscribe</a>, to read my latest original front end technology blogs.</strong></p>"}
