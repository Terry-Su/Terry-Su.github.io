{"pathnameRoot":"/cn/","authorUrl":"https://github.com/Terry-Su","locale":"zh_CN","logoTitle":"苏溪云","noteIsAutoTranslated":"本文为自动翻译。","copyright":{"left":"版权 © 2017-","center":"苏溪云","right":"保留所有权利"},"blogGithub":"https://github.com/Terry-Su/blogs-cn","id":"cn/summary-of-refactoring-project","title":"记一次前端项目重构要点总结","path":"Technology/Project","route":"/cn/summary-of-refactoring-project","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://user-images.githubusercontent.com/23733477/60633551-c2ce3b80-9e3d-11e9-951a-dead873002eb.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`不知不觉已是2019年的7月，恍惚之间已工作四年。懵懵懂懂的成长，间歇性努力，实话说，对现在自己取得的成果不大满意。不过，好在时不时顿悟，知道适时作出改变。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`此后发文会适当记录一些心路历程，与君共勉。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`本文要点：`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`什么项目，为何会重构？`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`怎么重构的？`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`重构前后对比`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`什么项目，为何会重构？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`项目是公司主打业务产品之一的可视化子项目，与其他子项目几乎没有耦合，所以可以单独拎出来重构。具体业务不作过多描述，主要重构内容为系统组件和一个`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/drawjs/drawjs\"}}>{`自研可视化图形库`}</MDXTag>{`。重构总共耗时30个工作日。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{` 技术主要用Vue2系列和JavaScript。第一个重构原因就是没有引入静态类型，导致查看一个对象结构需要翻来覆去在多个文件中查找。第二是因为之前新增代码模式一般为：“来一个需求加一段代码”，长期积累导致代码结构混乱，可读性差。第三是各个状态模块耦合度高，加大了代码维护难度。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`怎么重构的？`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`一、在JavaScript中使用TypeScript`}</MDXTag>{`。“什么？在JS中使用TS? 闻所未闻。 ” 在看到TS官网手册最后一条`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html\"}}>{`\"Type Checking JavaScript File\"`}</MDXTag>{`之前，我也这样想。其实，TS和VSCode（一款IDE）结合，也可以实现静态类型检测，只不过使用注释形式，一样支持`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`tsconfig.json`}</MDXTag>{`和自定义Typing。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`type TypeApple = { name: string, count: number }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/** @type {TypeApple} */\nconst apple = { name: 'foo', count: 100 }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`二、细化模块分类`}</MDXTag>{`。一般情况下，模块都会有耦合。但如果耦合度过高，往往是因为模块没有细分到位。如果细化模块？举例，假如有一个模块叫`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Operation`}</MDXTag>{`，里面既包含操作相关逻辑，也有操作面板逻辑。随着业务发展，操作面板逻辑越来越多。我们完全可以将操作面板逻辑单独抽成一个模块`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`OperationPanel`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`三、解耦可视化库和Vue/Vuex`}</MDXTag>{`。写业务的时候，很容易因为方便，在Vue组件或Vuex模块中代码越写越长，越来越难维护。这个项目也不列外。所以重构的时候，单独将可视化库相关逻辑抽成模块，并使用类Vuex写法(state, getters, mutations, actions)进行管理。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`class Counter {\n  // # state  \n  /** @type {number} */\n  count = 0\n\n  // # getters\n  get countText() { return \\`Count is: \\${ this.count }\\` }\n\n  // # mutations\n  /** @param {number} count*/\n  SET_COUNT = count => { this.count = count }\n  \n  // # actions\n  /** @param {number} count*/\n  logCount = ( count ) => {\n    this.SET_COUNT( count )\n    console.log( this.countText )\n  }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`四、最后一条，编写可维护性高的代码`}</MDXTag>{`。这里说两个方法。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`第一是“使用`}<MDXTag name=\"inlineCode\" components={components} parentName=\"strong\">{`Map`}</MDXTag>{`”`}</MDXTag>{`。处理“一个有多类型的数据”需要使用判断，常见有3种方法：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`If`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Switch`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Map`}</MDXTag>{`。`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`If`}</MDXTag>{`的使用简单粗暴，容易理解。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`if ( animalType === 'dog' ) {\n    console.log( 'Wang!' )\n} else if ( animalType === 'cat' ) {\n    console.log( 'Miao!' )\n} else if ( animalType === 'bird' ) {\n    console.log( 'Jiu!' )\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Switch`}</MDXTag>{`可以看做是`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`If`}</MDXTag>{`的简化。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`switch ( animalType ) {\n    case 'dog':\n      console.log( 'Wang!' )\n      break\n    case 'cat':\n      console.log( 'Miao!' )\n      break\n    case 'bird':\n      console.log( 'Jiu!' )\n      break\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`而`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Map`}</MDXTag>{`针对性最强，并且最简洁、最易于维护。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`const logMap = {\n    dog: () => console.log( 'Wang!' ),\n    cat: () => console.log( 'Miao!' ),\n    bird: () => console.log( 'Jiu!' ),\n}\nlogMap[ animalType ]()\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`具体使用也哪一种因场景而异，但多数场景下，使用`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Map`}</MDXTag>{`可读性更强。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`第二是“使用getters和mutations”`}</MDXTag>{`。比如定义一个模块的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{``}</MDXTag>{`：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`operationGetters.js`}</MDXTag>{`,  里面提供各种用来获取与操作有关的常量和方法。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`export const OPERATION_TYPE_A = 0\nexport const OPERATION_TYPE_B = 1\n\nexport const OPERATION_TITLE_MAP = {\n  [ OPERATION_TYPE_A ]: 'Title A',\n  [ OPERATION_TYPE_B ]: 'Title B',\n}\n\nexport const getOperationTitleByType = type => OPERATION_TITLE_MAP[ type ]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`定义`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`mutations`}</MDXTag>{`则是定义一个提供相关各种变更数据方法的文件。在维护代码的时候，查找变更方法名即可直接找到更改数据的出处。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`export const SET_OPERATION_TITLE = ( operation, title ) => { operation.title = title }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`重构前后对比`}</MDXTag>\n<MDXTag name=\"table\" components={components}>\n<MDXTag name=\"thead\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"thead\">\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`代码类型`}</MDXTag>\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}><MDXTag name=\"strong\" components={components} parentName=\"th\">{`重构前`}</MDXTag></MDXTag>\n<MDXTag name=\"th\" components={components} parentName=\"tr\" props={{\"align\":null}}><MDXTag name=\"strong\" components={components} parentName=\"th\">{`重构后`}</MDXTag></MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"tbody\" components={components} parentName=\"table\">\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`可视化工具库`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`245kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`214kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`组件`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`171kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`157kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`状态管理`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`62kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`60kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`模块模型`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`15kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`19kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`服务请求`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`12kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`4kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`常量`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`18kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`22kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`工具（Utils）`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`15kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`19kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`静态类型（TypeScript）`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`0kb`}</MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}>{`9kb`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"tr\" components={components} parentName=\"tbody\">\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}><MDXTag name=\"strong\" components={components} parentName=\"td\">{`合计`}</MDXTag></MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}><MDXTag name=\"strong\" components={components} parentName=\"td\">{`521kb`}</MDXTag></MDXTag>\n<MDXTag name=\"td\" components={components} parentName=\"tr\" props={{\"align\":null}}><MDXTag name=\"strong\" components={components} parentName=\"td\">{`509 kb`}</MDXTag></MDXTag>\n</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`因为边重构边在加新功能，且添加了定义TypeScript静态类型的代码，所以总代码量减少并不多。  `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`不过性能显著提升，最重要的是代码可读性、可维护性大大增强，从而能够更从容地应对新需求。`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1562199300000,"comment":7,"isAutoTranslated":false,"availableOtherLocales":[],"importedCodes":"","siteTitle":"记一次前端项目重构要点总结(苏溪云的博客)","siteMetaDescription":" 记一次前端项目重构要点总结 项目是公司主打业务产品之一的可视化子项目，与其他子项目几乎没有耦合，所以可以单独拎出来重构。 (苏溪云的博客)","categoryTitle":"分类","postTimeTitle":"发布时间","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"苏溪云的博客","siteMetaDescription":"苏溪云的原创前端技术博客 4年前端 分享主流前端技术 JavaScript ReactJS","categoryNewest":"最新文章","navArticles":"所有文章","navAbout":"关于作者"},"articleTexts":{"endingWordsExtra":"**欢迎[Star和订阅](https://github.com/Terry-Su/blogs-cn)，第一时间阅读我的最新原创前端技术博客。**","qrcodeImageUrl":"","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","category":"分类","postTime":"发布时间","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","commentOnGithub":"添加评论 (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>欢迎<a href=\"https://github.com/Terry-Su/blogs-cn\">Star和订阅</a>，第一时间阅读我的最新原创前端技术博客。</strong></p>"}
