{"pathnameRoot":"/cn/","authorUrl":"https://github.com/Terry-Su","locale":"zh_CN","logoTitle":"苏溪云","noteIsAutoTranslated":"本文为自动翻译。","copyright":{"left":"版权 © 2017-","center":"苏溪云","right":"保留所有权利"},"blogGithub":"https://github.com/Terry-Su/blogs-cn","id":"cn/reveal-redux-react-redux-mask","title":"揭开redux，react-redux的神秘面纱","path":"Technology/FrontEnd/React","route":"/cn/reveal-redux-react-redux-mask","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}>{`16年开始使用react-redux,迄今也已两年多。这时候再来阅读和读懂redux/react-redux源码，虽已没有当初的新鲜感，但依然觉得略有收获。把要点简单写下来，一方面供感兴趣的读者参考，另一方面也是自己做下总结。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`redux`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`react-redux最核心的内容就是redux。内带redux，react-redux只提供了几个API来关联redux与react的组件以及react state的更新。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`首先，看下如何使用redux。 redux老司机可以直接滑动滚轮至下一章。`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`简单来说，redux有三个概念: action, reducer 和 dispatch。 action和dispatch比较好理解：动作指令和提交动作指令方法。而reducer，个人在字面上没有理解，但抽象层面上可以理解为用来生成state的函数。用一个简单案例体现这三个概念：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// action\nconst INCREMENT = { type: 'INCREMENT' }\n\n// reducer\nfunction count( state = 0, action ) {\n    switch( action.type ) {\n        case 'INCREMENT':\n            return state + 1\n        default: \n          return state\n    }\n}\n\n// dispatch\n// 此处开始使用redux\nconst store = redux.createStore( count )\nconsole.log( store.getState() )  // 0\nstore.dispatch( INCREMENT )\nconsole.log( store.getState() ) // 1\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`接下来说说redux中的两大模块：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`store`}</MDXTag>{`对象`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`中间件`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`store对象`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`API`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore`}</MDXTag>{`会创建了一个`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`store`}</MDXTag>{`对象,创建的过程中它主要做了下面两件事：\n1. 初始化state\n2. 暴露相关接口：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState()`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch( action )`}</MDXTag>{`, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe( listener )`}</MDXTag>{`等。其中`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getState()`}</MDXTag>{`用来获取store中的实时state, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dispatch(action)`}</MDXTag>{`根据传入的action更新state, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`subscribe( listener)`}</MDXTag>{`可以监听state的变化。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`中间件`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`中间件可以用来debug或提交异步动作指令. 在初始化store的时候，我们通过`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`createStore( reducer, state, applyMiddleware( middleware1, middleware2 ) )`}</MDXTag>{`添加多个中间件。`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`为了实现多个中间件，redux专门引入了函数式编程的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`compose()`}</MDXTag>{`方法，简单来说，`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`compose`}</MDXTag>{`将多层函数调用的写法变得优雅：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// 未使用compose方法\na( b( c( 'd' ) ) )\n\n// 用compose方法\ncompose( a, b, c )('d')\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`而中间件的写法比较奇特，是多级函数，在阅读源码的时候有点绕。显然中间件的写法还可以优化，尽管现在的写法方便在源码中使用，但对redux用户来说稍显复杂，可以用单层函数。`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`function logMiddleware({ getState  }) {\n    return nextDispatch => action => {\n        console.log( 'before dispatch', getState() )\n        const res = nextDispatch( action )\n        console.log( 'after dispatch', getState() )\n        return res\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`react-redux`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`了解了redux运作原理，就可以知道react-redux的大部分使用场景是如何运作。react-redux提供了几个API将redux与react相互关联。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`基于上一个案例展示react-redux的用法：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// action\nconst increment = () => ({ type: 'INCREMENT' })\n\n// reducer\nfunction count( state = 0, action ) {\n    switch( action.type ) {\n        case 'INCREMENT':\n            return state + 1\n        default: \n          return state\n    }\n}\n\n// redux\nconst store = Redux.createStore( count )\n\n// react-redux\nconst { Provider, connect } = ReactRedux\nconst mapStateToProps = state => ( { count: state } )\nconst mapDispatchToProps = dispatch => ( { increment : () => dispatch( increment() ) } )\nconst App = connect( mapStateToProps, mapDispatchToProps )( class extends React.Component {\n  onClick = () => {\n   this.props.increment()\n  }  \n  render() {\n        return <div>\n          <p>Count: { this.props.count }</p>\n          <button onClick={ this.onClick }>+</button>\n        </div>\n    }\n} )\n\nReactDOM.render( <Provider store={ store }>\n    <App />\n</Provider>, document.getElementById( 'app' ) )\n`}</MDXTag></MDXTag>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/js/react-redux/demo/index.html?mode=result\"></iframe>\n<MDXTag name=\"p\" components={components}>{`react-redux提供最常用的两个API是：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Provider`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`connect`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`Provider`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Provider本质上是一个react组件，通过react的`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://reactjs.org/docs/legacy-context.html#how-to-use-context\"}}>{`context api`}</MDXTag>{`(使一个组件可以跨多级组件传递props)挂载redux store中的state，并且当组件初始化后开始监听state。`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`当监听到state改变，Provider会重新`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`setState`}</MDXTag>{`在context上的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`storeState`}</MDXTag>{`，简要实现代码如下：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`class Provider extends Component {\n    constructor(props) {\n      super(props)\n    \n      const { store } = props\n    \n      this.state = {\n        storeState: Redux.store.getState(),\n      }\n    }\n    \n    componentDidMount() {\n      this.subscribe()\n    }\n    \n    subscribe() {\n        const { store } = this.props\n        store.subscribe(() => {\n          const newStoreState = store.getState()\n          this.setState(providerState => {\n            return { storeState: newStoreState }\n          })\n        })\n    }\n    render() {\n        const Context = React.createContext(null)\n        <Context.Provider value={this.state}>\n            {this.props.children}\n        </Context.Provider>\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"h2\">{`connect()`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connect`}</MDXTag>{`方法通过`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`connectHOC`}</MDXTag>{`（HOC: react高阶组件）将部分或所有state以及提交动作指令方法赋值给react组件的props。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`小结`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`写react不用redux就像写代码不用git, 我们需要用redux来更好地管理react应用中的state。了解redux/react-redux的运作原理会消除我们在使用redux开发时的未知和疑惑，并且在脑中有一个完整的代码执行回路，让开发流程变得透明，直观。`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1545096420000,"comment":4,"availableOtherLocales":["en"],"importedCodes":"","siteTitle":"揭开redux，react-redux的神秘面纱(苏溪云的博客)","siteMetaDescription":" 揭开redux，react-redux的神秘面纱 16年开始使用react-redux,迄今也已两年多。这时候再来阅读和读懂redux/react-redux源码，虽已没有当初的新鲜感，但依然觉得略有收获。把要点简单写下来，一方面供感兴趣的读者参考，... (苏溪云的博客)","categoryTitle":"分类","postTimeTitle":"发布时间","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"苏溪云的博客","siteMetaDescription":"苏溪云的原创前端技术博客 4年前端 分享主流前端技术 JavaScript ReactJS","categoryNewest":"最近发布","navArticles":"所有文章","navAbout":"关于作者"},"articleTexts":{"endingWordsExtra":"**感谢你的阅读。欢迎通过微信（扫描下方二维码）或[Github](https://github.com/Terry-Su/blogs-cn)订阅我的博客。**\n\n ![微信公众号:苏溪云的博客](https://user-images.githubusercontent.com/23733477/77869172-2459f400-7270-11ea-8a84-d5d63a426c19.png)","qrcodeImageUrl":"","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","category":"分类","postTime":"发布时间","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","commentOnGithub":"添加评论 (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>感谢你的阅读。欢迎通过微信（扫描下方二维码）或<a href=\"https://github.com/Terry-Su/blogs-cn\">Github</a>订阅我的博客。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/23733477/77869172-2459f400-7270-11ea-8a84-d5d63a426c19.png\" alt=\"微信公众号:苏溪云的博客\" /></p>"}
