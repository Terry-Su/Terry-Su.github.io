{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright Â© 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"demonstrate-sorting-algorithms-using-animated-demos","title":"Demonstrate Sorting Algorithms Using Animated Demos","path":"Technology/Algorithm","route":"/demonstrate-sorting-algorithms-using-animated-demos","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><Common />\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/simpson-evolution.jpg\",\"alt\":null}}></MDXTag>{`    `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After learning common sorting algorithms, feel like demonstrating them using not only brief description but also animated demos.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here contains 6 sorting algorithms, half are simple, half are advanced:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Bubble sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Selection sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Insertion sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`~`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Merge sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Shell sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Quick sort`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Bubble sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This maybe the simplest sort, notoriously slow though.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`Suppose we were arranging a queue of baseball players by their height.\nStart from leftmost.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`compare two players `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`if the one on the left is taller, swap them. Otherwise, no action.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`move one position right`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Bubble />\n<MDXTag name=\"h2\" components={components}>{`Selection sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Start from leftmost too.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`look for shortest player from current position to right`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`swap shortest player with the player at current position`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`move one position right`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Selection />\n<MDXTag name=\"h2\" components={components}>{`Insertion sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In most cases, this is the best of elementary sorts. It's about twice as fast as the bubble sort.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`The steps is somewhat complicated than sorts above.Start from leftmost.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`partially sort left players`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`choose the first unsorted player as marked player`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`shift the players shorter than marked player to right`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`insert marked player into the previous  position of first shifted player.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Insert />\n<MDXTag name=\"h2\" components={components}>{`Merge sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The heart of the merge sort algorithm are the merging of two already-sorted arrays and recursion.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Merge_sort_algorithm_diagram.svg/800px-Merge_sort_algorithm_diagram.svg.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As shown in picture, main steps are:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Recur to split numbers into 2 parts`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`merge 2 parts`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Merge />\n<MDXTag name=\"h2\" components={components}>{`Shell sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The name \"Shell sort\" is named for Donald Shell, who discovered it. It's based on `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`insertion sort`}</MDXTag>{`, but adds a new feature that dramatically improves the insertion sort's performance.  `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Main steps`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`divide array into groups by interval(3 for example) and sort them continously until all items are divided and sorted.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`diminish the interval and continue to divide and sort until the interval becomes 1.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Shell />\n<MDXTag name=\"h2\" components={components}>{`Quick sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the majority of situations, this is the fastest sort.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`choose a pivot(rightmost item)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`partition the array into left sub array(smaller keys) and right sub array(larger keys)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`recur step2 to left sub array and right sub array`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Quick />\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1547564040000,"comment":13,"availableOtherLocales":["zh_CN"],"componentTextMap":{"Test":"render(<span></span>)","Common":"sharing.StyledRoot = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nsharing.StyledPlayButton = styled.button`\n  visibility: ${ props => props.isRunning ? 'hidden' : 'visible' };\n`\n\n\nrender(<span></span>)\n","Bubble":"const { StyledRoot, StyledPlayButton } = sharing\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props )\n    \n    this.time = 0\n\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\n\n    this.state = {\n      data: [...this.data],\n      currentI: null,\n      currentJ: null,\n      isRunning: false\n    }\n  }\n\n  asyncUpdate(arr, i, j) {\n    const tmp = [...arr]\n    this.time = this.time + 500\n    const currentTime = this.time\n    setTimeout(() => {\n      this.setState({\n        data: [...tmp],\n        currentI: i,\n        currentJ: j\n      })\n      if (currentTime === this.time) {\n        this.setState({ isRunning: false })\n      }\n    }, this.time)\n  }\n\n  bubbleSort(arr) {\n    const { length } = arr\n    for (let i = length - 1; i > 0; i--) {\n      for (let j = 0; j < i; j++) {\n        this.asyncUpdate(arr, i, j)\n        if (arr[j] > arr[j + 1]) {\n          // swap\n          const tmp = arr[j]\n          arr[j] = arr[j + 1]\n          arr[j + 1] = tmp\n          this.asyncUpdate(arr, i, j)\n        }\n      }\n    }\n    this.asyncUpdate(arr)\n  }\n\n  getItemStyleBackground(index) {\n    if (this.state.currentJ === index) {\n      return \"red\"\n    }\n    if (this.state.currentJ != null && this.state.currentJ + 1 === index) {\n      return \"orange\"\n    }\n    if (this.state.currentI === index) {\n      return \"purple\"\n    }\n    if (this.state.currentI != null && index > this.state.currentI) {\n      return \"deepSkyBlue\"\n    }\n    return \"blue\"\n  }\n\n  play() {\n    this.time = 0\n    this.setState({ data: [...this.data], isRunning: true }, () =>\n      this.bubbleSort(this.state.data)\n    )\n  }\n\n  render() {\n    const { data, activeI, activeJ, isRunning } = this.state\n\n    return (\n      <StyledRoot>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\"\n          }}\n        >\n          {data.map((num, index) => (\n            <span\n              key={index}\n              style={{\n                display: \"inline-flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n                width: \"50px\",\n                height: `${num * 20}px`,\n                margin: \"2px\",\n                color: \"#ddd\",\n                background: this.getItemStyleBackground(index)\n              }}\n            >\n              {num}\n            </span>\n          ))}\n        </div>\n        <br />\n        <StyledPlayButton\n          isRunning={isRunning}\n          onClick={() => this.play()}\n          onMouseOver={() => this.play()}\n        >\n          play\n        </StyledPlayButton>\n      </StyledRoot>\n    )\n  }\n}\n\nrender(<App />)\n","Selection":"const { StyledRoot, StyledPlayButton } = sharing\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props )\n    this.time = 0\n\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\n\n    this.state = {\n      data: [...this.data],\n      currentI: null,\n      currentJ: null,\n      isRunning: false\n    }\n  }\n\n  asyncUpdate(arr, i, j) {\n    const tmp = [...arr]\n    this.time = this.time + 500\n    const currentTime = this.time\n    setTimeout(() => {\n      this.setState({\n        data: [...tmp],\n        currentI: i,\n        currentJ: j\n      })\n      if (currentTime === this.time) {\n        this.setState({ isRunning: false })\n      }\n    }, this.time)\n  }\n\n  selectionSort(arr) {\n    const { length } = arr\n    for (let i = 0; i < length - 1; i++) {\n      let minIndex = i\n      for (let j = i; j < length - 1; j++) {\n        if (arr[j + 1] < arr[minIndex]) {\n          minIndex = j + 1\n        }\n      }\n      // swap\n      const tmp = arr[i]\n      arr[i] = arr[minIndex]\n      arr[minIndex] = tmp\n      this.asyncUpdate(arr, i)\n    }\n    this.asyncUpdate(arr, length)\n  }\n\n  getItemStyleBackground(index){\n    if (this.state.currentI != null && index > this.state.currentI) {\n      return \"deepSkyBlue\"\n    }\n    if (this.state.currentI === index) {\n      return \"grey\"\n    }\n    return \"blue\"\n  }\n\n  play() {\n    this.time = 0\n    this.setState({ data: [...this.data], isRunning: true }, () =>\n      this.selectionSort(this.state.data)\n    )\n  }\n\n  render() {\n    const { data, activeI, activeJ, isRunning } = this.state\n    return (\n      <StyledRoot>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\"\n          }}\n        >\n          {data.map((num, index) => (\n            <span\n              key={index}\n              style={{\n                display: \"inline-flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n                width: \"50px\",\n                height: `${num * 20}px`,\n                margin: \"2px\",\n                color: \"#ddd\",\n                background: this.getItemStyleBackground(index)\n              }}\n            >\n              {num}\n            </span>\n          ))}\n        </div>\n        <br />\n        <StyledPlayButton\n          isRunning={isRunning}\n          onClick={() => this.play()}\n          onMouseOver={() => this.play()}\n        >\n          play\n        </StyledPlayButton>\n      </StyledRoot>\n    )\n  }\n}\n\n\nrender(<App />)","Insert":"const { StyledRoot, StyledPlayButton } = sharing\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props )\n    this.time = 0\n\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\n\n    this.state = {\n      data: [...this.data],\n      currentI: null,\n      currentJ: null,\n      isRunning: false\n    }\n  }\n\n  asyncUpdate(arr, i, j) {\n    const tmp = [...arr]\n    this.time = this.time + 500\n    const currentTime = this.time\n    setTimeout(() => {\n      this.setState({\n        data: [...tmp],\n        currentI: i,\n        currentJ: j\n      })\n      if (currentTime === this.time) {\n        this.setState({ isRunning: false })\n      }\n    }, this.time)\n  }\n\n  insertionSort(arr) {\n    let i\n    let j // j is marked item's index\n    for (j = 1; j < arr.length; j++) {\n      const tmp = arr[j] // removed marked item\n      i = j\n      this.asyncUpdate(arr, i, j)\n      while (i > 0 && arr[i - 1] >= tmp) {\n        arr[i] = arr[i - 1] // shift item right\n        i = i - 1\n      }\n      // insert\n      arr[i] = tmp\n      this.asyncUpdate(arr, i, j)\n    }\n    this.asyncUpdate(arr)\n  }\n\n  getItemStyleBackground(index) {\n    if (this.state.currentJ === index) {\n      return \"red\"\n    }\n    if (this.state.currentI === index) {\n      return \"grey\"\n    }\n    return \"blue\"\n  }\n\n  play(index) {\n    this.time = 0\n    this.setState({ data: [...this.data], isRunning: true }, () =>\n      this.insertionSort(this.state.data)\n    )\n  }\n\n  render() {\n    const { data, activeI, activeJ, isRunning } = this.state\n    return (\n      <StyledRoot>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\"\n          }}\n        >\n          {data.map((num, index) => (\n            <span\n              key={index}\n              style={{\n                display: \"inline-flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n                width: \"50px\",\n                height: `${num * 20}px`,\n                margin: \"2px\",\n                color: \"#ddd\",\n                background: this.getItemStyleBackground(index)\n              }}\n            >\n              {num}\n            </span>\n          ))}\n        </div>\n        <br />\n        <StyledPlayButton\n          isRunning={isRunning}\n          onClick={() => this.play()}\n          onMouseOver={() => this.play()}\n        >\n          play\n        </StyledPlayButton>\n      </StyledRoot>\n    )\n  }\n}\n\nrender(<App />)","Merge":"const { StyledRoot, StyledPlayButton } = sharing\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props )\n    this.time = 0\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\n\n    this.state = {\n      data: [...this.data],\n      currentLeft: null,\n      currentRight: null,\n      currentMiddle: null,\n      isRunning: false\n    }\n  }\n\n  asyncUpdate(arr, left, right, middle) {\n    const tmp = [...arr]\n    this.time = this.time + 500\n    const currentTime = this.time\n    setTimeout(() => {\n      this.setState({\n        data: [...tmp],\n        currentLeft: left,\n        currentRight: right,\n        currentMiddle: middle\n      })\n      if (currentTime === this.time) {\n        this.setState({ isRunning: false })\n      }\n    }, this.time)\n  }\n\n  mergeSort(arr) {\n    const left = 0\n    const right = arr.length - 1\n    this.recurMergeSort(arr, left, right)\n    this.asyncUpdate(arr)\n  }\n\n  recurMergeSort(a, left, right) {\n    if (left == right) {\n      return\n    } else {\n      // Example: 2 / 2 = 1; 3 / 2 = 1;\n      const middle = Math.floor((left + right) / 2)\n      this.recurMergeSort(a, left, middle)\n      this.recurMergeSort(a, middle + 1, right)\n      this.merge(a, left, middle, right)\n      this.asyncUpdate(a, left, right, middle)\n    }\n  }\n\n  merge(aA, left, middle, right) {\n    let tmpSize = right - left + 1\n    // a temporary array used to re-assign value to aA\n    const tmp = []\n    let i = 0\n    let indexA = left\n    let indexB = middle + 1\n    while (indexA <= middle && indexB <= right) {\n      if (aA[indexA] < aA[indexB]) {\n        tmp[i] = aA[indexA]\n        indexA = indexA + 1\n      } else {\n        tmp[i] = aA[indexB]\n        indexB = indexB + 1\n      }\n      i = i + 1\n    }\n    while (indexA <= middle) {\n      tmp[i] = aA[indexA]\n      indexA = indexA + 1\n      i = i + 1\n    }\n    while (indexB <= right) {\n      tmp[i] = aA[indexB]\n      indexB = indexB + 1\n      i = i + 1\n    }\n    for (let j = 0; j < tmp.length; j++) {\n      aA[left + j] = tmp[j]\n    }\n  }\n\n  play() {\n    this.time = 0\n    this.setState({ data: [...this.data], isRunning: true }, () =>\n      this.mergeSort(this.state.data)\n    )\n  }\n\n  getItemStyleBackground(index) {\n    if (this.state.currentLeft === index) {\n      return \"deepSkyBlue\"\n    }\n    if (this.state.currentRight === index) {\n      return \"deepSkyBlue\"\n    }\n    if (this.state.currentLeft < index && this.state.currentRight > index) {\n      return \"deepSkyBlue\"\n    }\n    return \"blue\"\n  }\n\n  render() {\n    const { data, activeI, activeJ, isRunning } = this.state\n    return (\n      <StyledRoot>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\"\n          }}\n        >\n          {data.map((num, index) => (\n            <span\n              key={index}\n              style={{\n                display: \"inline-flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n                width: \"50px\",\n                height: `${num * 20}px`,\n                margin: \"2px\",\n                color: \"#ddd\",\n                background: this.getItemStyleBackground(index)\n              }}\n            >\n              {num}\n            </span>\n          ))}\n        </div>\n        <br />\n        <StyledPlayButton\n          isRunning={isRunning}\n          onClick={() => this.play()}\n          onMouseOver={() => this.play()}\n        >\n          play\n        </StyledPlayButton>\n      </StyledRoot>\n    )\n  }\n}\n\n\nrender(<App />)","Shell":"const { StyledRoot, StyledPlayButton } = sharing\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props )\n    this.time = 0\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\n\n    this.state = {\n      data: [...this.data],\n      currentI: null,\n      currentJ: null\n    }\n  }\n\n  asyncUpdate(arr, i, j) {\n    const tmp = [...arr]\n    this.time = this.time + 500\n    const currentTime = this.time\n    setTimeout(() => {\n      this.setState({\n        data: [...tmp],\n        currentI: i,\n        currentJ: j\n      })\n      if (currentTime === this.time) {\n        this.setState({ isRunning: false })\n      }\n    }, this.time)\n  }\n\n  shellSort(arr) {\n    this.insertionSortByH(arr, 3)\n    this.insertionSortByH(arr, 1)\n    this.asyncUpdate(arr)\n  }\n\n  insertionSortByH(a, h) {\n    const length = a.length\n    for (let i = 0; i < h; i++) {\n      let size = Math.floor((length - i) / h)\n      if (size > 0) {\n        // insertion sort\n        let input\n        let out // out is marked item\n\n        for (out = i; out < length; out += h) {\n          const tmp = a[out] // removed marked item\n          input = out\n\n          this.asyncUpdate(a, input, out)\n          while (input > 0 && input - h >= 0 && a[input - h] >= tmp) {\n            a[input] = a[input - h] // shift item right\n            input = input - h\n          }\n\n          // insert\n          a[input] = tmp\n          this.asyncUpdate(a, input, out)\n        }\n      }\n    }\n  }\n\n  getItemStyleBackground(index) {\n    if (this.state.currentJ === index) {\n      return \"red\"\n    }\n    if (this.state.currentI === index) {\n      return \"grey\"\n    }\n\n    return \"blue\"\n  }\n\n  play() {\n    this.time = 0\n    this.setState({ data: [...this.data], isRunning: true }, () =>\n      this.shellSort(this.state.data)\n    )\n  }\n\n  render() {\n    const { data, activeI, activeJ, isRunning } = this.state\n    return (\n      <StyledRoot>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\"\n          }}\n        >\n          {data.map((num, index) => (\n            <span\n              key={index}\n              style={{\n                display: \"inline-flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n                width: \"50px\",\n                height: `${num * 20}px`,\n                margin: \"2px\",\n                color: \"#ddd\",\n                background: this.getItemStyleBackground(index)\n              }}\n            >\n              {num}\n            </span>\n          ))}\n        </div>\n        <br />\n        <StyledPlayButton\n          isRunning={isRunning}\n          onClick={() => this.play()}\n          onMouseOver={() => this.play()}\n        >\n          play\n        </StyledPlayButton>\n      </StyledRoot>\n    )\n  }\n}\n\n\nrender(<App />)","Quick":"const { StyledRoot, StyledPlayButton } = sharing\n\nclass App extends React.Component {\n  constructor(props) {\n    super( props )\n    this.time = 0\n\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\n\n    this.state = {\n      data: [...this.data],\n      currentLeftIndex: null,\n      currentRightIndex: null,\n      currentPivotIndex: null,\n      currentTmpLeftIndex: null,\n      currentTmpRightIndex: null,\n      isRunning: false\n    }\n  }\n\n  asyncUpdate(\n    arr,\n    leftIndex,\n    rightIndex,\n    pivotIndex,\n    tmpLeftIndex,\n    tmpRightIndex\n  ) {\n    const tmp = [...arr]\n    this.time = this.time + 500\n    const currentTime = this.time\n    setTimeout(() => {\n      this.setState({\n        data: [...tmp],\n        currentLeftIndex: leftIndex,\n        currentRightIndex: rightIndex,\n        currentPivotIndex: pivotIndex,\n        currentTmpLeftIndex: tmpLeftIndex,\n        currentTmpRightIndex: tmpRightIndex\n      })\n      if (currentTime === this.time) {\n        this.setState({ isRunning: false })\n      }\n    }, this.time)\n  }\n\n  quickSort(arr) {\n    this.recurQuickSort(arr, 0, arr.length - 1)\n    this.asyncUpdate(arr)\n  }\n\n  recurQuickSort(a, leftIndex, rightIndex) {\n    if (leftIndex >= rightIndex) {\n      return\n    }\n\n    this.asyncUpdate(a, leftIndex, rightIndex, rightIndex)\n    const pivotIndex = this.partition(a, leftIndex, rightIndex, rightIndex)\n    this.asyncUpdate(a, leftIndex, rightIndex, pivotIndex)\n    this.asyncUpdate(a, leftIndex, rightIndex, pivotIndex)\n    this.recurQuickSort(a, leftIndex, pivotIndex - 1)\n    this.recurQuickSort(a, pivotIndex + 1, rightIndex)\n  }\n\n  partition(a, leftIndex, rightIndex, pivotIndex) {\n    let tmpLeftIndex = leftIndex - 1\n    let tmpRightIndex = rightIndex - 1 + 1\n    const pivot = a[pivotIndex]\n\n    while (true) {\n      do {\n        tmpLeftIndex = tmpLeftIndex + 1\n      } while (tmpLeftIndex < rightIndex && a[tmpLeftIndex] <= pivot)\n\n      do {\n        tmpRightIndex = tmpRightIndex - 1\n      } while (tmpRightIndex > 0 && a[tmpRightIndex] >= pivot)\n\n      if (tmpLeftIndex >= tmpRightIndex) {\n        break\n      } else {\n        this.asyncUpdate(\n          a,\n          leftIndex,\n          rightIndex,\n          pivotIndex,\n          tmpLeftIndex,\n          tmpRightIndex\n        )\n        this.swap(a, tmpLeftIndex, tmpRightIndex)\n        this.asyncUpdate(\n          a,\n          leftIndex,\n          rightIndex,\n          pivotIndex,\n          tmpLeftIndex,\n          tmpRightIndex\n        )\n      }\n    }\n    this.swap(a, tmpLeftIndex, pivotIndex)\n    return tmpLeftIndex\n  }\n\n  swap(arr, aIndex, bIndex) {\n    const tmp = arr[aIndex]\n    arr[aIndex] = arr[bIndex]\n    arr[bIndex] = tmp\n  }\n\n  getItemStyleBackground (index) {\n    if (this.state.currentPivotIndex === index) {\n      return \"grey\"\n    }\n    if (this.state.currentTmpLeftIndex === index) {\n      return \"red\"\n    }\n    if (this.state.currentTmpRightIndex === index) {\n      return \"red\"\n    }\n    if (\n      (this.state.currentLeftIndex < index &&\n        this.state.currentRightIndex > index) ||\n      this.state.currentLeftIndex === index ||\n      this.state.currentRightIndex === index\n    ) {\n      return \"deepSkyBlue\"\n    }\n    return \"blue\"\n  }\n\n  play() {\n    this.time = 0\n    this.setState({ data: [...this.data], isRunning: true }, () =>\n      this.quickSort(this.state.data)\n    )\n  }\n\n  render() {\n    const { data, activeI, activeJ, isRunning } = this.state\n    return (\n      <StyledRoot>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"flex-end\"\n          }}\n        >\n          {data.map((num, index) => (\n            <span\n              key={index}\n              style={{\n                display: \"inline-flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-end\",\n                width: \"50px\",\n                height: `${num * 20}px`,\n                margin: \"2px\",\n                color: \"#ddd\",\n                background: this.getItemStyleBackground(index)\n              }}\n            >\n              {num}\n            </span>\n          ))}\n        </div>\n        <br />\n        <StyledPlayButton\n          isRunning={isRunning}\n          onClick={() => this.play()}\n          onMouseOver={() => this.play()}\n        >\n          play\n        </StyledPlayButton>\n      </StyledRoot>\n    )\n  }\n}\n\n\nrender(<App />)"},"siteTitle":"Demonstrate Sorting Algorithms Using Animated Demos(Terry Su Blog)","siteMetaDescription":" Demonstrate Sorting Algorithms Using Animated Demos \n\n \n\nAfter learning common sorting algorithms, feel like demonstrating them using not only brief des... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Welcome to [star and subscribe](https://github.com/Terry-Su/blogs), to read my latest original front end technology blogs.**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Welcome to <a href=\"https://github.com/Terry-Su/blogs\">star and subscribe</a>, to read my latest original front end technology blogs.</strong></p>"}
