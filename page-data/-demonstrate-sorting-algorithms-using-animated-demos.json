{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright Â© 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"demonstrate-sorting-algorithms-using-animated-demos","title":"Demonstrate Sorting Algorithms Using Animated Demos","path":"Technology/Algorithm","route":"/demonstrate-sorting-algorithms-using-animated-demos","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/BlogCDN/images/simpson-evolution.jpg\",\"alt\":null}}></MDXTag>{`    `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After learning common sorting algorithms, feel like demonstrating them using not only brief description but also animated demos.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Here contains 6 sorting algorithms, half are simple, half are advanced:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Bubble sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Selection sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Insertion sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`~`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Merge sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Shell sort`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Quick sort`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Bubble sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This maybe the simplest sort, notoriously slow though.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`Suppose we were arranging a queue of baseball players by their height.\nStart from leftmost.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`compare two players `}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`if the one on the left is taller, swap them. Otherwise, no action.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`move one position right`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Bubble />\n<MDXTag name=\"h2\" components={components}>{`Selection sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Start from leftmost too.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`look for shortest player from current position to right`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`swap shortest player with the player at current position`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`move one position right`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Selection />\n<MDXTag name=\"h2\" components={components}>{`Insertion sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In most cases, this is the best of elementary sorts. It's about twice as fast as the bubble sort.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`The steps is somewhat complicated than sorts above.Start from leftmost.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`partially sort left players`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`choose the first unsorted player as marked player`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`shift the players shorter than marked player to right`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`insert marked player into the previous  position of first shifted player.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Insert />\n<MDXTag name=\"h2\" components={components}>{`Merge sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The heart of the merge sort algorithm are the merging of two already-sorted arrays and recursion.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Merge_sort_algorithm_diagram.svg/800px-Merge_sort_algorithm_diagram.svg.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`As shown in picture, main steps are:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Recur to split numbers into 2 parts`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`merge 2 parts`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Merge />\n<MDXTag name=\"h2\" components={components}>{`Shell sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The name \"Shell sort\" is named for Donald Shell, who discovered it. It's based on `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`insertion sort`}</MDXTag>{`, but adds a new feature that dramatically improves the insertion sort's performance.  `}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Main steps`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`divide array into groups by interval(3 for example) and sort them continously until all items are divided and sorted.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`diminish the interval and continue to divide and sort until the interval becomes 1.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<Shell />\n<MDXTag name=\"h2\" components={components}>{`Quick sort`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the majority of situations, this is the fastest sort.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`choose a pivot(rightmost item)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`partition the array into left sub array(smaller keys) and right sub array(larger keys)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`recur step2 to left sub array and right sub array`}</MDXTag>\n</MDXTag>\n</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1547564040000,"comment":13,"availableOtherLocales":["zh_CN"],"importedCodes":"\nconst StyledRoot = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst StyledPlayButton = styled.button`\r\n  visibility: ${ props => props.isRunning ? 'hidden' : 'visible' };\r\n`\r\n\r\n\r\n\nclass Bubble extends React.Component {\r\n  constructor(props) {\r\n    super( props )\r\n    \r\n    this.time = 0\r\n\r\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\r\n\r\n    this.state = {\r\n      data: [...this.data],\r\n      currentI: null,\r\n      currentJ: null,\r\n      isRunning: false\r\n    }\r\n  }\r\n\r\n  asyncUpdate(arr, i, j) {\r\n    const tmp = [...arr]\r\n    this.time = this.time + 500\r\n    const currentTime = this.time\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: [...tmp],\r\n        currentI: i,\r\n        currentJ: j\r\n      })\r\n      if (currentTime === this.time) {\r\n        this.setState({ isRunning: false })\r\n      }\r\n    }, this.time)\r\n  }\r\n\r\n  bubbleSort(arr) {\r\n    const { length } = arr\r\n    for (let i = length - 1; i > 0; i--) {\r\n      for (let j = 0; j < i; j++) {\r\n        this.asyncUpdate(arr, i, j)\r\n        if (arr[j] > arr[j + 1]) {\r\n          // swap\r\n          const tmp = arr[j]\r\n          arr[j] = arr[j + 1]\r\n          arr[j + 1] = tmp\r\n          this.asyncUpdate(arr, i, j)\r\n        }\r\n      }\r\n    }\r\n    this.asyncUpdate(arr)\r\n  }\r\n\r\n  getItemStyleBackground(index) {\r\n    if (this.state.currentJ === index) {\r\n      return \"red\"\r\n    }\r\n    if (this.state.currentJ != null && this.state.currentJ + 1 === index) {\r\n      return \"orange\"\r\n    }\r\n    if (this.state.currentI === index) {\r\n      return \"purple\"\r\n    }\r\n    if (this.state.currentI != null && index > this.state.currentI) {\r\n      return \"deepSkyBlue\"\r\n    }\r\n    return \"blue\"\r\n  }\r\n\r\n  play() {\r\n    this.time = 0\r\n    this.setState({ data: [...this.data], isRunning: true }, () =>\r\n      this.bubbleSort(this.state.data)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { data, activeI, activeJ, isRunning } = this.state\r\n\r\n    return (\r\n      <StyledRoot>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\"\r\n          }}\r\n        >\r\n          {data.map((num, index) => (\r\n            <span\r\n              key={index}\r\n              style={{\r\n                display: \"inline-flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\",\r\n                width: \"50px\",\r\n                height: `${num * 20}px`,\r\n                margin: \"2px\",\r\n                color: \"#ddd\",\r\n                background: this.getItemStyleBackground(index)\r\n              }}\r\n            >\r\n              {num}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <StyledPlayButton\r\n          isRunning={isRunning}\r\n          onClick={() => this.play()}\r\n          onMouseOver={() => this.play()}\r\n        >\r\n          play\r\n        </StyledPlayButton>\r\n      </StyledRoot>\r\n    )\r\n  }\r\n}\r\n\nclass Selection extends React.Component {\r\n  constructor(props) {\r\n    super( props )\r\n    this.time = 0\r\n\r\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\r\n\r\n    this.state = {\r\n      data: [...this.data],\r\n      currentI: null,\r\n      currentJ: null,\r\n      isRunning: false\r\n    }\r\n  }\r\n\r\n  asyncUpdate(arr, i, j) {\r\n    const tmp = [...arr]\r\n    this.time = this.time + 500\r\n    const currentTime = this.time\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: [...tmp],\r\n        currentI: i,\r\n        currentJ: j\r\n      })\r\n      if (currentTime === this.time) {\r\n        this.setState({ isRunning: false })\r\n      }\r\n    }, this.time)\r\n  }\r\n\r\n  selectionSort(arr) {\r\n    const { length } = arr\r\n    for (let i = 0; i < length - 1; i++) {\r\n      let minIndex = i\r\n      for (let j = i; j < length - 1; j++) {\r\n        if (arr[j + 1] < arr[minIndex]) {\r\n          minIndex = j + 1\r\n        }\r\n      }\r\n      // swap\r\n      const tmp = arr[i]\r\n      arr[i] = arr[minIndex]\r\n      arr[minIndex] = tmp\r\n      this.asyncUpdate(arr, i)\r\n    }\r\n    this.asyncUpdate(arr, length)\r\n  }\r\n\r\n  getItemStyleBackground(index){\r\n    if (this.state.currentI != null && index > this.state.currentI) {\r\n      return \"deepSkyBlue\"\r\n    }\r\n    if (this.state.currentI === index) {\r\n      return \"grey\"\r\n    }\r\n    return \"blue\"\r\n  }\r\n\r\n  play() {\r\n    this.time = 0\r\n    this.setState({ data: [...this.data], isRunning: true }, () =>\r\n      this.selectionSort(this.state.data)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { data, activeI, activeJ, isRunning } = this.state\r\n    return (\r\n      <StyledRoot>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\"\r\n          }}\r\n        >\r\n          {data.map((num, index) => (\r\n            <span\r\n              key={index}\r\n              style={{\r\n                display: \"inline-flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\",\r\n                width: \"50px\",\r\n                height: `${num * 20}px`,\r\n                margin: \"2px\",\r\n                color: \"#ddd\",\r\n                background: this.getItemStyleBackground(index)\r\n              }}\r\n            >\r\n              {num}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <StyledPlayButton\r\n          isRunning={isRunning}\r\n          onClick={() => this.play()}\r\n          onMouseOver={() => this.play()}\r\n        >\r\n          play\r\n        </StyledPlayButton>\r\n      </StyledRoot>\r\n    )\r\n  }\r\n}\r\n\r\n\nclass Insert extends React.Component {\r\n  constructor(props) {\r\n    super( props )\r\n    this.time = 0\r\n\r\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\r\n\r\n    this.state = {\r\n      data: [...this.data],\r\n      currentI: null,\r\n      currentJ: null,\r\n      isRunning: false\r\n    }\r\n  }\r\n\r\n  asyncUpdate(arr, i, j) {\r\n    const tmp = [...arr]\r\n    this.time = this.time + 500\r\n    const currentTime = this.time\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: [...tmp],\r\n        currentI: i,\r\n        currentJ: j\r\n      })\r\n      if (currentTime === this.time) {\r\n        this.setState({ isRunning: false })\r\n      }\r\n    }, this.time)\r\n  }\r\n\r\n  insertionSort(arr) {\r\n    let i\r\n    let j // j is marked item's index\r\n    for (j = 1; j < arr.length; j++) {\r\n      const tmp = arr[j] // removed marked item\r\n      i = j\r\n      this.asyncUpdate(arr, i, j)\r\n      while (i > 0 && arr[i - 1] >= tmp) {\r\n        arr[i] = arr[i - 1] // shift item right\r\n        i = i - 1\r\n      }\r\n      // insert\r\n      arr[i] = tmp\r\n      this.asyncUpdate(arr, i, j)\r\n    }\r\n    this.asyncUpdate(arr)\r\n  }\r\n\r\n  getItemStyleBackground(index) {\r\n    if (this.state.currentJ === index) {\r\n      return \"red\"\r\n    }\r\n    if (this.state.currentI === index) {\r\n      return \"grey\"\r\n    }\r\n    return \"blue\"\r\n  }\r\n\r\n  play(index) {\r\n    this.time = 0\r\n    this.setState({ data: [...this.data], isRunning: true }, () =>\r\n      this.insertionSort(this.state.data)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { data, activeI, activeJ, isRunning } = this.state\r\n    return (\r\n      <StyledRoot>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\"\r\n          }}\r\n        >\r\n          {data.map((num, index) => (\r\n            <span\r\n              key={index}\r\n              style={{\r\n                display: \"inline-flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\",\r\n                width: \"50px\",\r\n                height: `${num * 20}px`,\r\n                margin: \"2px\",\r\n                color: \"#ddd\",\r\n                background: this.getItemStyleBackground(index)\r\n              }}\r\n            >\r\n              {num}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <StyledPlayButton\r\n          isRunning={isRunning}\r\n          onClick={() => this.play()}\r\n          onMouseOver={() => this.play()}\r\n        >\r\n          play\r\n        </StyledPlayButton>\r\n      </StyledRoot>\r\n    )\r\n  }\r\n}\nclass Merge extends React.Component {\r\n  constructor(props) {\r\n    super( props )\r\n    this.time = 0\r\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\r\n\r\n    this.state = {\r\n      data: [...this.data],\r\n      currentLeft: null,\r\n      currentRight: null,\r\n      currentMiddle: null,\r\n      isRunning: false\r\n    }\r\n  }\r\n\r\n  asyncUpdate(arr, left, right, middle) {\r\n    const tmp = [...arr]\r\n    this.time = this.time + 500\r\n    const currentTime = this.time\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: [...tmp],\r\n        currentLeft: left,\r\n        currentRight: right,\r\n        currentMiddle: middle\r\n      })\r\n      if (currentTime === this.time) {\r\n        this.setState({ isRunning: false })\r\n      }\r\n    }, this.time)\r\n  }\r\n\r\n  mergeSort(arr) {\r\n    const left = 0\r\n    const right = arr.length - 1\r\n    this.recurMergeSort(arr, left, right)\r\n    this.asyncUpdate(arr)\r\n  }\r\n\r\n  recurMergeSort(a, left, right) {\r\n    if (left == right) {\r\n      return\r\n    } else {\r\n      // Example: 2 / 2 = 1; 3 / 2 = 1;\r\n      const middle = Math.floor((left + right) / 2)\r\n      this.recurMergeSort(a, left, middle)\r\n      this.recurMergeSort(a, middle + 1, right)\r\n      this.merge(a, left, middle, right)\r\n      this.asyncUpdate(a, left, right, middle)\r\n    }\r\n  }\r\n\r\n  merge(aA, left, middle, right) {\r\n    let tmpSize = right - left + 1\r\n    // a temporary array used to re-assign value to aA\r\n    const tmp = []\r\n    let i = 0\r\n    let indexA = left\r\n    let indexB = middle + 1\r\n    while (indexA <= middle && indexB <= right) {\r\n      if (aA[indexA] < aA[indexB]) {\r\n        tmp[i] = aA[indexA]\r\n        indexA = indexA + 1\r\n      } else {\r\n        tmp[i] = aA[indexB]\r\n        indexB = indexB + 1\r\n      }\r\n      i = i + 1\r\n    }\r\n    while (indexA <= middle) {\r\n      tmp[i] = aA[indexA]\r\n      indexA = indexA + 1\r\n      i = i + 1\r\n    }\r\n    while (indexB <= right) {\r\n      tmp[i] = aA[indexB]\r\n      indexB = indexB + 1\r\n      i = i + 1\r\n    }\r\n    for (let j = 0; j < tmp.length; j++) {\r\n      aA[left + j] = tmp[j]\r\n    }\r\n  }\r\n\r\n  play() {\r\n    this.time = 0\r\n    this.setState({ data: [...this.data], isRunning: true }, () =>\r\n      this.mergeSort(this.state.data)\r\n    )\r\n  }\r\n\r\n  getItemStyleBackground(index) {\r\n    if (this.state.currentLeft === index) {\r\n      return \"deepSkyBlue\"\r\n    }\r\n    if (this.state.currentRight === index) {\r\n      return \"deepSkyBlue\"\r\n    }\r\n    if (this.state.currentLeft < index && this.state.currentRight > index) {\r\n      return \"deepSkyBlue\"\r\n    }\r\n    return \"blue\"\r\n  }\r\n\r\n  render() {\r\n    const { data, activeI, activeJ, isRunning } = this.state\r\n    return (\r\n      <StyledRoot>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\"\r\n          }}\r\n        >\r\n          {data.map((num, index) => (\r\n            <span\r\n              key={index}\r\n              style={{\r\n                display: \"inline-flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\",\r\n                width: \"50px\",\r\n                height: `${num * 20}px`,\r\n                margin: \"2px\",\r\n                color: \"#ddd\",\r\n                background: this.getItemStyleBackground(index)\r\n              }}\r\n            >\r\n              {num}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <StyledPlayButton\r\n          isRunning={isRunning}\r\n          onClick={() => this.play()}\r\n          onMouseOver={() => this.play()}\r\n        >\r\n          play\r\n        </StyledPlayButton>\r\n      </StyledRoot>\r\n    )\r\n  }\r\n}\r\n\nclass Shell extends React.Component {\r\n  constructor(props) {\r\n    super( props )\r\n    this.time = 0\r\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\r\n\r\n    this.state = {\r\n      data: [...this.data],\r\n      currentI: null,\r\n      currentJ: null\r\n    }\r\n  }\r\n\r\n  asyncUpdate(arr, i, j) {\r\n    const tmp = [...arr]\r\n    this.time = this.time + 500\r\n    const currentTime = this.time\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: [...tmp],\r\n        currentI: i,\r\n        currentJ: j\r\n      })\r\n      if (currentTime === this.time) {\r\n        this.setState({ isRunning: false })\r\n      }\r\n    }, this.time)\r\n  }\r\n\r\n  shellSort(arr) {\r\n    this.insertionSortByH(arr, 3)\r\n    this.insertionSortByH(arr, 1)\r\n    this.asyncUpdate(arr)\r\n  }\r\n\r\n  insertionSortByH(a, h) {\r\n    const length = a.length\r\n    for (let i = 0; i < h; i++) {\r\n      let size = Math.floor((length - i) / h)\r\n      if (size > 0) {\r\n        // insertion sort\r\n        let input\r\n        let out // out is marked item\r\n\r\n        for (out = i; out < length; out += h) {\r\n          const tmp = a[out] // removed marked item\r\n          input = out\r\n\r\n          this.asyncUpdate(a, input, out)\r\n          while (input > 0 && input - h >= 0 && a[input - h] >= tmp) {\r\n            a[input] = a[input - h] // shift item right\r\n            input = input - h\r\n          }\r\n\r\n          // insert\r\n          a[input] = tmp\r\n          this.asyncUpdate(a, input, out)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getItemStyleBackground(index) {\r\n    if (this.state.currentJ === index) {\r\n      return \"red\"\r\n    }\r\n    if (this.state.currentI === index) {\r\n      return \"grey\"\r\n    }\r\n\r\n    return \"blue\"\r\n  }\r\n\r\n  play() {\r\n    this.time = 0\r\n    this.setState({ data: [...this.data], isRunning: true }, () =>\r\n      this.shellSort(this.state.data)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { data, activeI, activeJ, isRunning } = this.state\r\n    return (\r\n      <StyledRoot>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\"\r\n          }}\r\n        >\r\n          {data.map((num, index) => (\r\n            <span\r\n              key={index}\r\n              style={{\r\n                display: \"inline-flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\",\r\n                width: \"50px\",\r\n                height: `${num * 20}px`,\r\n                margin: \"2px\",\r\n                color: \"#ddd\",\r\n                background: this.getItemStyleBackground(index)\r\n              }}\r\n            >\r\n              {num}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <StyledPlayButton\r\n          isRunning={isRunning}\r\n          onClick={() => this.play()}\r\n          onMouseOver={() => this.play()}\r\n        >\r\n          play\r\n        </StyledPlayButton>\r\n      </StyledRoot>\r\n    )\r\n  }\r\n}\r\n\r\n\nclass Quick extends React.Component {\r\n  constructor(props) {\r\n    super( props )\r\n    this.time = 0\r\n\r\n    this.data = [8, 9, 4, 6, 3, 2, 1, 7, 5]\r\n\r\n    this.state = {\r\n      data: [...this.data],\r\n      currentLeftIndex: null,\r\n      currentRightIndex: null,\r\n      currentPivotIndex: null,\r\n      currentTmpLeftIndex: null,\r\n      currentTmpRightIndex: null,\r\n      isRunning: false\r\n    }\r\n  }\r\n\r\n  asyncUpdate(\r\n    arr,\r\n    leftIndex,\r\n    rightIndex,\r\n    pivotIndex,\r\n    tmpLeftIndex,\r\n    tmpRightIndex\r\n  ) {\r\n    const tmp = [...arr]\r\n    this.time = this.time + 500\r\n    const currentTime = this.time\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: [...tmp],\r\n        currentLeftIndex: leftIndex,\r\n        currentRightIndex: rightIndex,\r\n        currentPivotIndex: pivotIndex,\r\n        currentTmpLeftIndex: tmpLeftIndex,\r\n        currentTmpRightIndex: tmpRightIndex\r\n      })\r\n      if (currentTime === this.time) {\r\n        this.setState({ isRunning: false })\r\n      }\r\n    }, this.time)\r\n  }\r\n\r\n  quickSort(arr) {\r\n    this.recurQuickSort(arr, 0, arr.length - 1)\r\n    this.asyncUpdate(arr)\r\n  }\r\n\r\n  recurQuickSort(a, leftIndex, rightIndex) {\r\n    if (leftIndex >= rightIndex) {\r\n      return\r\n    }\r\n\r\n    this.asyncUpdate(a, leftIndex, rightIndex, rightIndex)\r\n    const pivotIndex = this.partition(a, leftIndex, rightIndex, rightIndex)\r\n    this.asyncUpdate(a, leftIndex, rightIndex, pivotIndex)\r\n    this.asyncUpdate(a, leftIndex, rightIndex, pivotIndex)\r\n    this.recurQuickSort(a, leftIndex, pivotIndex - 1)\r\n    this.recurQuickSort(a, pivotIndex + 1, rightIndex)\r\n  }\r\n\r\n  partition(a, leftIndex, rightIndex, pivotIndex) {\r\n    let tmpLeftIndex = leftIndex - 1\r\n    let tmpRightIndex = rightIndex - 1 + 1\r\n    const pivot = a[pivotIndex]\r\n\r\n    while (true) {\r\n      do {\r\n        tmpLeftIndex = tmpLeftIndex + 1\r\n      } while (tmpLeftIndex < rightIndex && a[tmpLeftIndex] <= pivot)\r\n\r\n      do {\r\n        tmpRightIndex = tmpRightIndex - 1\r\n      } while (tmpRightIndex > 0 && a[tmpRightIndex] >= pivot)\r\n\r\n      if (tmpLeftIndex >= tmpRightIndex) {\r\n        break\r\n      } else {\r\n        this.asyncUpdate(\r\n          a,\r\n          leftIndex,\r\n          rightIndex,\r\n          pivotIndex,\r\n          tmpLeftIndex,\r\n          tmpRightIndex\r\n        )\r\n        this.swap(a, tmpLeftIndex, tmpRightIndex)\r\n        this.asyncUpdate(\r\n          a,\r\n          leftIndex,\r\n          rightIndex,\r\n          pivotIndex,\r\n          tmpLeftIndex,\r\n          tmpRightIndex\r\n        )\r\n      }\r\n    }\r\n    this.swap(a, tmpLeftIndex, pivotIndex)\r\n    return tmpLeftIndex\r\n  }\r\n\r\n  swap(arr, aIndex, bIndex) {\r\n    const tmp = arr[aIndex]\r\n    arr[aIndex] = arr[bIndex]\r\n    arr[bIndex] = tmp\r\n  }\r\n\r\n  getItemStyleBackground (index) {\r\n    if (this.state.currentPivotIndex === index) {\r\n      return \"grey\"\r\n    }\r\n    if (this.state.currentTmpLeftIndex === index) {\r\n      return \"red\"\r\n    }\r\n    if (this.state.currentTmpRightIndex === index) {\r\n      return \"red\"\r\n    }\r\n    if (\r\n      (this.state.currentLeftIndex < index &&\r\n        this.state.currentRightIndex > index) ||\r\n      this.state.currentLeftIndex === index ||\r\n      this.state.currentRightIndex === index\r\n    ) {\r\n      return \"deepSkyBlue\"\r\n    }\r\n    return \"blue\"\r\n  }\r\n\r\n  play() {\r\n    this.time = 0\r\n    this.setState({ data: [...this.data], isRunning: true }, () =>\r\n      this.quickSort(this.state.data)\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { data, activeI, activeJ, isRunning } = this.state\r\n    return (\r\n      <StyledRoot>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\"\r\n          }}\r\n        >\r\n          {data.map((num, index) => (\r\n            <span\r\n              key={index}\r\n              style={{\r\n                display: \"inline-flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"flex-end\",\r\n                width: \"50px\",\r\n                height: `${num * 20}px`,\r\n                margin: \"2px\",\r\n                color: \"#ddd\",\r\n                background: this.getItemStyleBackground(index)\r\n              }}\r\n            >\r\n              {num}\r\n            </span>\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <StyledPlayButton\r\n          isRunning={isRunning}\r\n          onClick={() => this.play()}\r\n          onMouseOver={() => this.play()}\r\n        >\r\n          play\r\n        </StyledPlayButton>\r\n      </StyledRoot>\r\n    )\r\n  }\r\n}","siteTitle":"Demonstrate Sorting Algorithms Using Animated Demos(Terry Su Blog)","siteMetaDescription":" Demonstrate Sorting Algorithms Using Animated Demos  \n\nAfter learning common sorting algorithms, feel like demonstrating them using not only brief descr... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Thanks for your reading. Welcome to subscribe my blog by [Github](https://github.com/Terry-Su/blogs).**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Thanks for your reading. Welcome to subscribe my blog by <a href=\"https://github.com/Terry-Su/blogs\">Github</a>.</strong></p>"}
