{"pathnameRoot":"/","authorUrl":"https://github.com/Terry-Su","locale":"en","logoTitle":"Terry Su","noteIsAutoTranslated":"This page is translated automatically.","copyright":{"left":"Copyright Â© 2017-","center":"Terry Su","right":"ALL RIGHTS RESERVED"},"blogGithub":"https://github.com/Terry-Su/blogs","id":"gist-es6-iterator","title":"Gist-ES6-Iterator","path":"Technology/FrontEnd/JavaScript","route":"/gist-es6-iterator","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components}>{`Introduction`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Iterator is one of the most common design modes in daily development. Let's explore the iterator continent in the javacript world, here we go!`}</MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Gist Iterator Mode`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`It's the basic iterator mode concept:`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://sfault-image.b0.upaiyun.com/313/415/3134156573-59538bf9ed814_articlex\",\"alt\":null}}></MDXTag><MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`And it's like this in javascript world:`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://sfault-image.b0.upaiyun.com/590/033/590033887-59538bd8a3857_articlex\",\"alt\":null}}></MDXTag>{`    `}</MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Grammar rules`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Attention`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Assume that \"iterable\" is an adjective, and \"iterableFn\" is a iterable.`}<MDXTag name=\"br\" components={components} parentName=\"p\"></MDXTag>{`\n`}{`It's a little confusing when lots of \"iterable\" appear at the same time.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Relation between iterable and iterator`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Iterator can be created by iterableFn(an iterable), iterableFn belongs to iterable sources.`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Iterables`}</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Iterable sources`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Array`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`String`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Map`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Set`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Dom Elements`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Arguments`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Get iterableFn(used to generate iterator)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`IterableFn can be derived from iterable source by its property: Symbol.iterator, for example: `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`const iterableFn = [][Symbol.iterator]`}</MDXTag></MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\"><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Symbol.iterator`}</MDXTag>{`\nA method that returns the default Iterator for an object. Called by the semantics of the for-of statement.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/** Test in chrome 55  **/\n// Array\nconsole.log( [][Symbol.iterator] )    // function values() { [native code] }\n\n// String\nconsole.log( ''[Symbol.iterator] )    // function [Symbol.iterator]() { [native code] }\n\n// Map\nconsole.log( new Map([[]])[Symbol.iterator] )    // function entries() { [native code] }\n\n// Set\nconsole.log( new Set([])[Symbol.iterator] )    // function values() { [native code] }\n\n// Dom elements\nconsole.log( document.getElementsByTagName('body')[Symbol.iterator] )    // function values() { [native code] }\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator] )\n}\ntest(1, 2, 3)    // // function values() { [native code] }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Iterable sources' consumers`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Follow consumers' implementations mainly depend on iterables.Howerver, the examples are irrelevant to topic.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`for of`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`for(const i in [1, 2]) {\n    cosnole.log(i)\n}     \n    // 1\n    // 2\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`...(The spread opeartor)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`console.log( [...\"ab\"] )     // [\"a\", \"b\"]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Array.from`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`console.log( Array.from(\"ab\") )    // [\"a\", \"b\"]\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`Iterators`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Iterator is common used, as to decouple algorithms.`}</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Iterator = iterableFn()`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`After iterable's implementation, it returns an object called iterator, which uses \"next\" method to iterate.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/** Test in chrome 55  **/\n// Array\nconsole.log( [][Symbol.iterator]() )    // ArrayIterator {}\n\n// String\nconsole.log( ''[Symbol.iterator]() )    //  StringIterator {}\n\n// Map\nconsole.log( new Map([[]])[Symbol.iterator]() )    // MapIterator {[undefined, undefined]}\n\n// Set\nconsole.log( new Set([])[Symbol.iterator]() )    // SetIterator {}\n\n// Dom elements\nconsole.log( document.getElementsByTagName('body')[Symbol.iterator]() )    // ArrayIterator {}\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator]() )\n}\ntest(1, 2, 3)    // ArrayIterator {}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Add value and Implement method \"next\":`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`/** Test in chrome 55  **/\n// Array\nconsole.log( [1, 2][Symbol.iterator]().next() )    // {value: 1, done: false}\n\n// String\nconsole.log( 'ab'[Symbol.iterator]().next() )    //  {value: 'a', done: false}\n\n// Map\nconsole.log( new Map([[1, 'a']])[Symbol.iterator]().next() )    // {value: [1, 'a'], done: false}\n\n// Set\nconsole.log( new Set([1, 1, 2])[Symbol.iterator]().next() )    // {value1: , done: false}\n\n// Dom elements\nconsole.log( document.getElementsByTagName('body')[Symbol.iterator]().next() )    // {value: body(dom), done: false}\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator]().next() )\n}\ntest(1, 2, 3)    // {value: 1, done: false}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components}>{`Iterator = generator()`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Setting iterator mutually again and again seems inefficient, syntactic sugar is needed. Fortunately, ES6 provides the useful \"generater\"`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`function* iteratorMaker() {\n    yield 1\n    yield 2\n}\n\nconst iterator =  iteratorMaker()\n\nconsole.log( iterator )    // iteratorMaker {[[GeneratorStatus]]: \"suspended\", [[GeneratorReceiver]]: Window, [[GeneratorLocation]]: Object}\n\nconsole.log( iterator.next() )    // {value: 1, done: false}\n\nconsole.log( iterator.next() )    // {value: 2, done: false}\n\nconsole.log( iterator.next() )    // {value: undefined, done: true}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Application`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Iterator can be applied in wide situations, there's a sample to generate increasing id numbers.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`function* idIteratorMaker() {\n    let id = 0\n    while (true) {\n        yield id++\n    }\n}\n\nfunction create(idIterator) {\n    return idIterator.next().value\n}\n\nconst idIterator = idIteratorMaker()\n\nconst a = create(idIterator)\nconst b = create(idIterator)\nconst c = create(idIterator)\n\nconsole.log(a)     // 0\nconsole.log(b)     // 1\nconsole.log(c)     // 2\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Conclusion`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Obviously, iterator makes codes more readable and matainable.  `}</MDXTag>\n<MDXTag name=\"h1\" components={components}>{`Reference`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"http://exploringjs.com/es6/ch_iteration.html#sec_iterating-language-constructs\"}}>{`http://exploringjs.com/es6/ch_iteration.html#sec_iterating-language-constructs`}</MDXTag>{`  `}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://tc39.github.io/ecma262/#table-1\"}}>{`https://tc39.github.io/ecma262/#table-1`}</MDXTag></MDXTag>\n</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1498892220000,"comment":1,"availableOtherLocales":[],"importedCodes":"","siteTitle":"Gist-ES6-Iterator(Terry Su Blog)","siteMetaDescription":" Gist-ES6-Iterator INTRODUCTION\nIterator is one of the most common design modes in daily development. Let's explore the... (Terry Su Blog)","categoryTitle":"Category","postTimeTitle":"Post Time","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"Terry Su Blog","siteMetaDescription":"Terry Su's original front-end technology blog 4 years front-end shares popular front-end technology JavaScript ReactJS","categoryNewest":"Latest Blogs","navArticles":"ARTICLES","navAbout":"ABOUT"},"articleTexts":{"endingWordsExtra":"**Welcome to [star and subscribe](https://github.com/Terry-Su/blogs), to read my latest original front end technology blogs.**","qrcodeImageUrl":"","reprintingNote":"Author all rights reserved reprint please indicate the source no commercial reprint","category":"Category","postTime":"Post Time","githubIssuePageBase":"https://github.com/Terry-Su/blogs/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs/issues/","commentOnGithub":"Comment (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>Welcome to <a href=\"https://github.com/Terry-Su/blogs\">star and subscribe</a>, to read my latest original front end technology blogs.</strong></p>"}
