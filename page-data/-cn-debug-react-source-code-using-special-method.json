{"pathnameRoot":"/cn/","authorUrl":"https://github.com/Terry-Su","locale":"zh_CN","logoTitle":"苏溪云","noteIsAutoTranslated":"本文为自动翻译。","copyright":{"left":"版权 © 2017-","center":"苏溪云","right":"保留所有权利"},"blogGithub":"https://github.com/Terry-Su/blogs-cn","id":"cn/debug-react-source-code-using-special-method","title":"另辟蹊径搭建阅读React源码调试环境-支持所有React版本细分文件断点调试","path":"Technology/FrontEnd/React","route":"/cn/debug-react-source-code-using-special-method","text":"\n\nconst layoutProps = {\n  \n};\nclass MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/debug-react-source-code-in-special-way/gif.gif\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components}>{`引言（为什么写这篇文章）`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`若要高效阅读和理解React源码，搭建调试环境是必不可少的一步。而常规方法：使用`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom.development.js`}</MDXTag>{`调试，虽然方便，但无法知道每段代码属于哪个细分文件，所以本文将介绍一种取巧的方法搭建便于调试React源码的环境，支持断点调试细分文件，并且此方法理论上可应用于所有Reat版本。`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`最近一个月忙着换工作，这周终于有时间继续写发文章。写文章耗时短，搭建工具耗时较长，读者们可主要看工具使用模块。`}</MDXTag>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`React使用当前最新版本：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`16.13.1`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`今年会写一个“搞懂React源码系列”，把React最核心的内容用最易懂的方式讲清楚。2020年搞懂React源码系列：`}</MDXTag>\n<MDXTag name=\"ul\" components={components} parentName=\"blockquote\">\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`React Diff原理`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`React 调度原理`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`（当前）搭建阅读React源码环境-支持React所有版本断点调试细分文件`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`React Hooks原理`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`快速使用`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`就像用手机并不一定要知道它的生产过程，使用源码调试环境也不一定要知道它的构建方法。`}</MDXTag>\n<MDXTag name=\"h3\" components={components}>{`方法1: 线上调试`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/debug-react-source-code-in-special-way/online-example.png\",\"alt\":null}}></MDXTag>{`\n访问地址：`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://terry-su.github.io/debug-react-source-code/example/react-16.13.1\"}}>{`https://terry-su.github.io/debug-react-source-code/example/react-16.13.1`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components}>{`（推荐）方法2：下载对应直接调试源码文件`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`此方法优势是可修改源码，比如在源码中添加注释。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`使用步骤：`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`1 . 访问项目`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/Terry-Su/debug-react-source-code\"}}>{`debug-react-source-code`}</MDXTag>{`，选择要调试React版本对应分支,然后点击下载压缩包。`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/debug-react-source-code-in-special-way/switch-branch.png\",\"alt\":null}}></MDXTag>{`\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/debug-react-source-code-in-special-way/download.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`当前（2020/6/21）版本列表：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/Terry-Su/debug-react-source-code/tree/debug-react-16.13.1\"}}>{`debug-react-16.13.1`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/Terry-Su/debug-react-source-code/tree/debug-react-16.6.0\"}}>{`debug-react-16.6.0`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`2 . 将压缩包解压后，用vscode打开该文件夹。vscode需安装`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\"}}>{`Debugger for Chrome`}</MDXTag>{`拓展，用于在vscode对源码添加断点`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`3 . 安装依赖后，开启服务`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`npm install\n`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`npm start\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`4 . 在源码中添加断点，按F5启动调试即可\n`}<MDXTag name=\"img\" components={components} parentName=\"p\" props={{\"src\":\"https://terry-su.github.io/assets/blogs/debug-react-source-code-in-special-way/vscode-example.png\",\"alt\":null}}></MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`~ ~ ~ ~ ~ ~`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`~ ~ ~ ~ ~ ~`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`背景`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`正片现在开始。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`接下来讲讲搭建该调试环境背景。React官方建议直接使用源码项目中创建生成的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom.development.js`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`但此方法无法看到每段代码所在具体源文件。最好的方案是能够直接调试源码中的细分文件。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`其实之前网上可以找到实现此方案的方法，用webpack新建一个项目，然后想办法引入React源码中的各个模块，再添加各种配置，修改源文件以解决各种特殊情况。我之前也尝试过，但发现随着版本更新，该方法已逐渐不再适用，因为会遇到无法解决的特殊情况。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`根本原因是因为React源码的打包配置较多，且含有自定义配置，所以即使给`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rollup`}</MDXTag>{`配置了`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`sourcemap`}</MDXTag>{`也不会生效。`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`有人给react提过`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/facebook/react/issues/14361\"}}>{`一个编译react生成sourcemap的issue`}</MDXTag>{`，但Dan的回复是：\"你应该具备不依赖sourcemap调试开发模式下源码的能力\"。HaHa`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`但是，能够调试源码文件的确是刚需，怎么办呢？`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`实现方法`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`于是，开始从其他突破口寻找解决方案。生成sourcemap的方案走不通，那通过`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`反过来生成各种细分文件是否可行？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`如果要生成各个细分文件，就需要它们的路径信息，在哪里添加？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`既然react源码是通过`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rollup`}</MDXTag>{`打包生成，那么，能否在`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rollup`}</MDXTag>{`配置中添加一个自定义插件，往`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`中注入代码对应路径？`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`顺着这个思路，一番尝试后，发现有一两种特殊情况要处理，但最终目的成功实现！是的，目前所搭建调试环境就是使用此方法。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`具体实现细节较复杂，这里先简单说下主要流程：`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`1 . 生成注入细分源码文件路径信息的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom.development.js`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`2 . 从`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom.development.js`}</MDXTag>{`中提取核心数据，反向生成源码文件`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`3 . 根据核心数据，新建react,react-dom对应html和主要html,使用iframe实现隔离react、react-dom代码作用域和使不同html能够通信。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`衡量利弊`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`此方法优点：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`简化（移除flow类型代码和生产环境相关代码）`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`方便使用，可放在线上调试（体验地址：`}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://terry-su.github.io/debug-react-source-code/example/react-16.13.1/%EF%BC%89\"}}>{`https://terry-su.github.io/debug-react-source-code/example/react-16.13.1/）`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`此方法缺点：`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`没有Flow类型代码`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`没有生产环境相关代码`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`如何解决缺点？方法就是配合原始源码细分文件一起阅读，比如查看一个对象的类型结构。\n但大多数情况下，此方法都适用。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`具体实现`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`本小节仅建议想了解此工具构建原理的同学阅读， 对于只需要获取调试环境的读者，可跳过此小节。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`1 . 下载react源码，安装依赖项。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`2 . 创建自定义`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rollup`}</MDXTag>{`插件，生成新的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`build.js`}</MDXTag>{`：在新`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`build.js`}</MDXTag>{`中引入自定义`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`rollup`}</MDXTag>{`插件，该插件的作用是给每个文件的头部和尾部添加特殊起始标记和结束标记，每个标记都包含该文件的路径信息\n运行新的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`build.js`}</MDXTag>{`，从而生成注入了细分文件路径信息的`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react.development.js`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom.development.js`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`3 . 处理`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-development.js`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`react-dom.development.js`}</MDXTag>{`，生成核心数据：基于两个JS文件，生成对应核心数据，类型结构为：`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{outputFile: string, text: string}[]`}</MDXTag>{`。`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`outputFile`}</MDXTag>{`是反向输出的文件路径，`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`text`}</MDXTag>{`为文件内容。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`4 . 基于核心数据，创建源码调试环境: 创建`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dependency-react.html`}</MDXTag>{`和`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`dependency-react-dom.html`}</MDXTag>{`和其他所需文件。目录结构为：`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`/react.development/\n/react-dom.development/\n/babel.js\n/dependency-main.html\n/dependency-react.html\n/dependency-react-dom.html\n/index.html\n/index.js\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`其中，`}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`index.js`}</MDXTag>{`即为调试入口文件。`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`完整内容建议感兴趣的同学直接阅读源码：`}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/Terry-Su/debug-react-source-code\"}}>{`debug-react-source-code`}</MDXTag>{`。`}</MDXTag>\n<MDXTag name=\"h2\" components={components}>{`预告`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`下一篇将写React hooks的原理。Hooks的精髓往往不是的它的实现原理，而是设计理念。但弄懂React hooks原理，能让我们进一步加深对hooks思想和设计方式的理解。`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\nrender( <MDXContent /> )\n  ","postTime":1592750580000,"comment":12,"isAutoTranslated":false,"availableOtherLocales":[],"importedCodes":"","siteTitle":"另辟蹊径搭建阅读React源码调试环境-支持所有React版本细分文件断点调试(苏溪云的博客)","siteMetaDescription":" 另辟蹊径搭建阅读React源码调试环境-支持所有React版本细分文件断点调试 若要高效阅读和理解React源码，搭建调试环境是必不可少的一步。而常规方法：使用`react.development.js`和`react-dom.development.js`调试，虽然方便，但无法知道每段代码属于哪个细分文件，所以本文将介绍一种取巧的方法搭建便于调试React源码的环境，支持断点调试细分文件，并且此方法理论上可应用于所有Reat版本。 (苏溪云的博客)","categoryTitle":"分类","postTimeTitle":"发布时间","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","endingWords":"article.endingWords","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","remarkDisqusComment":"https://terrysu.disqus.com/embed.js","texts":{"siteTitle":"苏溪云的博客","siteMetaDescription":"苏溪云的原创前端技术博客 4年前端 分享主流前端技术 JavaScript ReactJS","categoryNewest":"最近发布","navArticles":"所有文章","navAbout":"关于作者"},"articleTexts":{"endingWordsExtra":"**感谢你的阅读。欢迎通过微信（扫描下方二维码）或[Github](https://github.com/Terry-Su/blogs-cn)订阅我的博客。**\n\n ![微信公众号:苏溪云的博客](https://user-images.githubusercontent.com/23733477/77869172-2459f400-7270-11ea-8a84-d5d63a426c19.png)","qrcodeImageUrl":"","reprintingNote":"作者版权所有，转载请注明出处，禁止商业转载","category":"分类","postTime":"发布时间","githubIssuePageBase":"https://github.com/Terry-Su/blogs-cn/issues/","githubCommentBase":"https://api.github.com/repos/terry-su/blogs-cn/issues/","commentOnGithub":"添加评论 (by Github Issues)"},"markedEndingWordsExtra":"<p><strong>感谢你的阅读。欢迎通过微信（扫描下方二维码）或<a href=\"https://github.com/Terry-Su/blogs-cn\">Github</a>订阅我的博客。</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/23733477/77869172-2459f400-7270-11ea-8a84-d5d63a426c19.png\" alt=\"微信公众号:苏溪云的博客\" /></p>"}
